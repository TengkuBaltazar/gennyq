package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import org.json.JSONArray;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;

rule "SAVE_AGREEMENT_DOC_STUFF"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		newApplication : BaseEntity()
		output : OutputParam()
		bucketCode : String(bucketCode.equals("ANY"))
		controlSignalCode : String(controlSignalCode.equals("EDIT_DOC"))


     then
 		System.out.println("SAVE_AGREEMENT_DOC_STUFF: Rule fired" );

		System.out.println("@@@@@@@@@@@@@ SAVE AGREEMENT DOC RULE: CALCULATING END DATE AND TIMES @@@@@@@@@@@@@");
		
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String startDateTime = beUtils.getBaseEntityValueAsLocalDate(newApplication.getCode(), "PRI_START_DATE").toString();
		System.out.println("startDateTime = " +startDateTime);

		if (startDateTime != null) {
				String startDate = startDateTime.toString();
				System.out.println("startDate : " + startDate); 
		
				String[] startDateArray = startDate.split("-");
		
				String str_year = startDate.split("-")[0];
				String str_month = startDate.split("-")[1];
				String str_day = startDate.split("-")[2];

				int int_year = Integer.parseInt(str_year);
				int int_month = Integer.parseInt(str_month);
				int int_day = Integer.parseInt(str_day);
				System.out.println("int_year: " +int_year + ", int_month: " + int_month + ", int_day: " + int_day);
				
				LocalDate dumbStartDate = LocalDate.of(int_year, int_month, int_day);
				
				String muddleDuration = newApplication.getValue("LNK_INTERNSHIP_DURATION", null);
				System.out.println("muddleDuration : " + muddleDuration);
				
				if (muddleDuration != null) {
						String durationStr = muddleDuration.replace("\"", "").replace("[", "").replace("]", "");
						BaseEntity durationBe = beUtils.getBaseEntityByCode(durationStr);
						System.out.println("durationBe: " + durationBe);
						String realDuration = durationBe.getValue("PRI_NAME", null);
						
						if (realDuration != null) {
								Long longDuration = Long.parseLong(realDuration);
																
								LocalDate dumbEndDate = dumbStartDate.plusWeeks(longDuration);
								DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy/mm/dd");
								
								String stringDED = dumbEndDate.format(formatter);
								System.out.println("stringDED : " + stringDED);

								Answer answerEndDate = new Answer(userToken.getUserCode(), newApplication.getCode(),"PRI_END_DATE", stringDED);
								beUtils.saveAnswer(answerEndDate);
								
								
						} else {
							System.out.println("ERROR: No realDuration"); 
						}
				} else {
					System.out.println("ERROR: No muddleDuration");
				}
		} else {
			System.out.println("ERROR: No startDate"); 
		}
		
		
		String linkedDPW = newApplication.getValue("LNK_DAYS_PER_WEEK", null);
		System.out.println("linkedDPW : " + linkedDPW);
		
		if (linkedDPW != null) {
				linkedDPW = linkedDPW.replace("\"", "").replace("[", "").replace("]", "");
				BaseEntity linkedDPWBe = beUtils.getBaseEntityByCode(linkedDPW);
				
				String dpw = linkedDPWBe.getValue("PRI_NAME", null);
				
				if (dpw != null) {
						int idpw = Integer.parseInt(dpw);
						int intHPW = 8 * idpw;
						System.out.println(intHPW);
						
						String hoursPerWeek = intHPW +"";
						System.out.println(hoursPerWeek);
						
						Answer answerHoursPW = new Answer(userToken.getUserCode(), newApplication.getCode(),"PRI_HOURS_PER_WEEK", hoursPerWeek);
						beUtils.saveAnswer(answerHoursPW);
				} else {
					System.out.println("ERROR: No dpw"); 
				}
		} else {
			System.out.println("ERROR: No linkedDPW"); 
		}




		System.out.println("@@@@@@@@@@@@@ SAVE AGREEMENT DOC RULE: SAVING WHICH DAYS @@@@@@@@@@@@@");
		
		JSONArray jsonArrayWhichDays = new JSONArray(beUtils.getBaseEntityValue(newApplication.getCode(), "LNK_WHICH_DAYS").toString());
		
		int jsonArrayWhichDaysLength = jsonArrayWhichDays.length();
		System.out.println("jsonArrayWhichDaysLength: " + jsonArrayWhichDaysLength);

		String whichDays = "";

		for(int i=0; i<jsonArrayWhichDaysLength; i++) {
				BaseEntity whichDaysEntity = beUtils.getBaseEntityByCode(jsonArrayWhichDays.get(i).toString());
				System.out.println("whichDaysEntity: " + whichDaysEntity);
						
				if(i==0) {
						whichDays = whichDaysEntity.getName();
				} else {
						whichDays = whichDays + ", " + whichDaysEntity.getName();
				}
				System.out.println("whichDays: " + whichDays);
		}
		
		Answer answerWhichDays = new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_WHICH_DAYS_STRIPPED", true);
 		beUtils.saveAnswer(answerWhichDays);
	


		retract(newApplication)
		retract(bucketCode)
		retract(controlSignalCode)

end
