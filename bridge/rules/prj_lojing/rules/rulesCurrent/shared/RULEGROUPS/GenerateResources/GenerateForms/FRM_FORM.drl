package life.genny.rules;
global org.apache.logging.log4j.Logger log;



rule "FRM_FORM"
    ruleflow-group 'GenerateFrames'

    when
      not  Frame3(code == "FRM_FORM")
      serviceToken : GennyToken( code == "PER_SERVICE")

    then
        System.out.println("   Generate FRM_FORM  RULE TEST (PRJ_LOJING)" + serviceToken.getUserCode());
				String apiUrl = GennySettings.qwandaServiceUrl + "/service/forms";
				System.out.println("QwandaServiceUrl is "+apiUrl);
				String jsonFormCodes = null;
				List<String> questionCodes = new ArrayList<String>();

				if (!VertxUtils.cachedEnabled) {  /* Not running junit mode */
					jsonFormCodes = QwandaUtils.apiGet(apiUrl, serviceToken.getToken());
					System.out.println("jsonFormCodes=["+jsonFormCodes+"]");

					Type type = new TypeToken<List<String>>() {
					}.getType();
					questionCodes  = JsonUtils.fromJson(jsonFormCodes, type);
				} else {
					/* used for testing */
                    /* TODO: Unclear if we need this for lojing" */
					questionCodes.add("QUE_JOURNAL_W1D1_GRP");
				}

				System.out.println("Array of all the Form Codes");
				System.out.println("Form Codes=" + questionCodes);

				for (String questionCode : questionCodes){
					if (questionCode.contains("JOURNAL_W")) {
						continue;
					}
					Frame3 frame2 = Frame3.builder("FRM_CONTENT_" +  questionCode)
                        .question(questionCode).end()
                        .build();

					frame2.setRealm(serviceToken.getRealm());

					Frame3 frame = Frame3.builder("FRM_" +  questionCode)
							.addFrame(frame2,FramePosition.CENTRE)
							.end()
							.build();

					frame.setRealm(serviceToken.getRealm());
					System.out.println(frame.getCode());
					FrameUtils2.toMessage(frame, serviceToken);
				}

end
