package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.EmailHelper;
import life.genny.message.QMessageGennyMSG;
import org.apache.commons.lang3.ObjectUtils;
import life.genny.utils.validation.MessageValidator;
import java.time.LocalDateTime;

rule "TRIGGER_NOTIFY_INTERN_EMAIL_RED"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
        $message : QEventMessage(data.code == "SCHEDULE_APPLIED_RED")
        userToken : GennyToken  ()
        serviceToken : GennyToken (code == "PER_SERVICE" )
    then
  		System.out.println(drools.getRule().getName() + " : Rule fired" );
        System.out.println(drools.getRule().getName() + " : Rule fired at "+ LocalDateTime.now());
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode: " +targetCode);

		BaseEntity applicationBe  = beUtils.getBaseEntityByCode(targetCode);
        System.out.println("applicationBe: "+ applicationBe);

		if(applicationBe != null) {
            /* Fetching agent from application */
            BaseEntity agentBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_AGENT");
            /* Fetching intern from application */
            BaseEntity internBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "PRI_INTERN_CODE");
            /* Fetching internship from application */
            BaseEntity internshipBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERNSHIP");
            BaseEntity hcBe = null;
            if(internshipBe != null){
                /* Fetching host company from internship */
                hcBe = beUtils.getBaseEntityFromLNKAttr(internshipBe, "LNK_HOST_COMPANY");
            }

            System.out.println("agentBe: "+ agentBe);
            System.out.println("internBe: "+ internBe);
            System.out.println("hcBe: "+ hcBe);
            System.out.println("internshipBe: "+ internshipBe);

            if (ObjectUtils.allNotNull(agentBe,internBe,internshipBe,hcBe)) {

                Boolean isInternEmailBlank = MessageValidator.isEmailBlank(internBe);
                System.out.println("isInternEmailBlank: "+isInternEmailBlank);

                if(!isInternEmailBlank){
                    /* Creating url for the applied application */
                    String internUrl = new StringBuilder()
                        .append("SBE_APPLIED_APPLICATIONS_")
                        .append(userToken.getJTI().toUpperCase())
                        .append("/")
                        .append("ACT_PRI_EVENT_VIEW_APPLICATION")
                        .append("/")
                        .append(applicationBe.getCode())
                        .toString();
                    System.out.println("url attached to intern email: "+ internUrl);
                    /* Building sendgrid msg and sending it */
                    QMessageGennyMSG internSendgridMsg = new QMessageGennyMSG.Builder("MSG_IM_INTERN_APPLIED_REMINDER_96HRS")
                                        .addRecipient(internBe)
                                        .addContext("HC", hcBe)
                                        .addContext("URL:ENCODE", internUrl)
                                        .setUtils(beUtils)
                                        .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(internSendgridMsg));
                    System.out.println("Sendgrid email sent to intern!!");
                }

                Boolean isInternMobileBlank = MessageValidator.isMobileBlank(internBe);
                System.out.println("isInternMobileBlank: "+isInternMobileBlank);

                /* send sms only if it's a production environment */
                if(!isInternMobileBlank && !GennySettings.projectUrl.contains("dev")){
                    /* Building sms msg and sending it */
                    QMessageGennyMSG smsMsg =  new QMessageGennyMSG.Builder("MSG_SMS_IM_INTERN_APPLIED_REMINDER_96HRS")
                        .addRecipient(internBe)
                        .setUtils(beUtils)
                        .send();
                    System.out.println("Sms msg: "+ JsonUtils.toJson(smsMsg));
                    System.out.println("Sms sent to intern!!");
                }

                Boolean isAgentEmailBlank = MessageValidator.isEmailBlank(internBe);
                System.out.println("isAgentEmailBlank: "+isAgentEmailBlank);

                if(!isAgentEmailBlank){
                    String agentUrl =  new StringBuilder()
                        .append("SBE_AVAILABLE_INTERNS_")
                        .append(userToken.getJTI().toUpperCase())
                        .append("/")
                        .append("ACT_PRI_EVENT_VIEW")
                        .append("/")
                        .append(internBe.getCode())
                        .toString();

                    /* Building sendgrid msg and sending it */
                    QMessageGennyMSG agentSendGridMsg = new QMessageGennyMSG.Builder("MSG_IM_AGENT_INTERN_NOT_ACCEPTED_APPLICATION")
                        .addRecipient(agentBe)
                        .addContext("INTERN", internBe)
                        .addContext("URL:ENCODE", agentUrl)
                        .setUtils(beUtils)
                        .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(agentSendGridMsg));
                    System.out.println("Sendgrid email sent to agent!!");
                }
            }else{
                System.out.println("Required Object is NULL!!");
            }
		}else{
            System.out.println("Application is NULL!!");
		}

	retract($message)
end