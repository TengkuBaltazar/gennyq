package life.genny.gadaq;

import life.genny.qwandaq.message.QEventMessage;
import life.genny.qwandaq.models.UserToken;

import org.apache.commons.lang3.StringUtils;
import life.genny.qwandaq.utils.SearchUtils;
import life.genny.qwandaq.utils.CacheUtils;
import life.genny.qwandaq.utils.KafkaUtils;
import life.genny.qwandaq.utils.BaseEntityUtils;
import life.genny.kogito.common.utils.KogitoUtils;

import life.genny.qwandaq.entity.BaseEntity;
import life.genny.qwandaq.entity.SearchEntity;

ruleflow-group 'EventRoutes'

rule RouteAuthInit 
when
	msg: QEventMessage( data.code == "AUTH_INIT" )
	userToken : UserToken()
	kogitoUtils : KogitoUtils()
then
	kogitoUtils.triggerWorkflow("authInit", "eventMessage", msg);
end

rule RouteSubmit 
when
	msg: QEventMessage( data.code == "QUE_SUBMIT" )
	kogitoUtils : KogitoUtils()
then
	String processId = msg.getData().getProcessId();
	kogitoUtils.sendSignal("processQuestions", processId, "submit", "");
	retract(msg);
end

rule RouteCancel 
when
	msg: QEventMessage( data.code == "QUE_CANCEL" )
	kogitoUtils : KogitoUtils()
then
	String processId = msg.getData().getProcessId();
	kogitoUtils.sendSignal("processQuestions", processId, "cancel", "");
	retract(msg);
end

rule RouteReset 
when
	msg: QEventMessage( data.code == "QUE_RESET" )
	kogitoUtils : KogitoUtils()
then
	String processId = msg.getData().getProcessId();
	kogitoUtils.sendSignal("processQuestions", processId, "reset", "");
	retract(msg);
end

rule RouteAddItem 
when
	msg: QEventMessage( data.code matches "QUE_ADD_.*" )
	kogitoUtils : KogitoUtils()
then
	String code = StringUtils.removeStart(msg.getData().getCode(), "QUE_ADD_");
	kogitoUtils.triggerWorkflow("createBaseEntity", "definitionCode", "DEF_"+code);
	retract(msg);
end

rule QUE_TREE_ITEM_EDU_PROVIDERS 
when
	msg: QEventMessage( data.code == "BTN_CLICK QUE_TREE_ITEM_EDU_PROVIDERS" )
	userToken: UserToken()
	kogitoUtils : KogitoUtils()
	searchUtils: SearchUtils();
	beUtils: BaseEntityUtils();
then
 	String searchCode = "SBE_"+msg.getData().getCode().substring("BTN_CLICK QUE_TREE_ITEM_".length());
	System.out.println("Triggering "+searchCode+" Table");


	System.out.println(drools.getRule().getName() + " triggered");
		String targetCode = msg.getData().getTargetCode();
       

		/* create SearchEntity if the cached version is null */

		SearchEntity searchBE = null;
		searchBE = new SearchEntity("SBE_INTERNS", "Intern Search")
				.addSort("PRI_CREATED", "Created", SearchEntity.Sort.DESC)
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%").addFilter("PRI_IS_INTERN", true)
				.addColumn("PRI_CODE", "Code")
				.addColumn("PRI_NAME", "Name");
		
		searchBE.setRealm(userToken.getProductCode());

		searchBE.setPageStart(0);
		Integer pageSize = 10;
		searchBE.setPageSize(pageSize);

		/* send PCM for PCM_TABLE to frontend */
		BaseEntity pcmCode = beUtils.getBaseEntityByCode("PCM_TABLE"); 


		/* Now call the fyodor tableSearch! */
		searchUtils.searchTable(searchBE);



		retract(msg);
end
/**
 * If no route exists within gadaq, the message should be
 * sent to the project specific service.
 */
rule ForwardEvent
salience 0
when
	msg: QEventMessage()
then
	System.out.println("Forwarding Event Message...");
	KafkaUtils.writeMsg("genny_events", msg);
	retract(msg);
end

