package life.genny.rules;

import java.io.IOException;

global life.genny.qwanda.message.QBulkMessage payload;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.CapabilityUtils;
import life.genny.qwanda.Answer;
import java.util.List;
import java.util.ArrayList;
import life.genny.model.OutputParamTreeSet;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.utils.TableUtils;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GennySettings;
import org.drools.core.spi.KnowledgeHelper;

rule "SEND_SIDEBAR_AGENT"
	ruleflow-group 'SendAsks'
	salience 10
	no-loop true
	when
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken( code == "PER_SERVICE")
		allowed : Allowed(code == "AGENT")
		beUtils : BaseEntityUtils()
	
	then
		System.out.println(drools.getRule().getName() + " triggered");

		/* get the sidebar ask from cache */
		Ask sidebarAsk = VertxUtils.getObject(serviceToken.getRealm(), "", "SIDEBAR_AGENT", Ask.class, serviceToken.getToken());

		if(sidebarAsk == null){
			System.out.println("sidebarAsk is not in cache");

		}else{
			
			String json = JsonUtils.toJson(sidebarAsk);
			json = json.replaceAll("PER_SERVICE", userToken.getUserCode());

			sidebarAsk = JsonUtils.fromJson(json, Ask.class);
			/* send the sidebar asks */
			QDataAskMessage askMsg = new QDataAskMessage(sidebarAsk);
			askMsg.setToken(userToken.getToken());
			VertxUtils.writeMsg("webcmds", askMsg);
		}
end
