package life.genny.rules;
import life.genny.models.GennyToken;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.GennySettings;
import life.genny.utils.VertxUtils;

rule "IS_MENTOR"
    ruleflow-group 'IsBaseEntity'
    no-loop true
    salience 1000
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType: String("MENTOR".equals(baseEntityType))
		newBe : BaseEntity()
 		beUtils: BaseEntityUtils()
    then
        System.out.println(drools.getRule().getName() + " : Rule fired" );
 		System.out.println(drools.getRule().getName() + " newBe = " + newBe.getCode());

		String status = newBe.getValue("PRI_STATUS",null);
		if(status != null && status !="VERIFIED")
		{
		/*  Construct answer with Source, Target, Attribute Code, Value */
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_IS_MENTOR", "true"));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_MENTOR_CODE", newBe.getCode()));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS", "UNVERIFIED"));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_DISABLED", "false"));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_TRAINING_STATUS", "Incomplete"));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_STATUS_COLOR", "#5cb85c"));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode() ,"PRI_PROFILE", "Complete"));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_USER_PROFILE", "Complete"));

			newBe = beUtils.getBaseEntityByCode(newBe.getCode());

			BaseEntity industryBe = beUtils.getBaseEntityFromLNKAttr(newBe, "LNK_MM_INDUSTRY");
			String industryName = industryBe.getValue("PRI_NAME", null);
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_INDUSTRY", industryName));

			BaseEntity locationBe = beUtils.getBaseEntityFromLNKAttr(newBe, "LNK_MENTOR_LOC_PREF");
			String locationName = locationBe.getValue("PRI_NAME", null);
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_LOC_PREF", locationName));

			BaseEntity hobbiesInterestBe = beUtils.getBaseEntityFromLNKAttr(newBe, "LNK_HOBBIES_INTEREST");
			String hobbiesInterestBeName = hobbiesInterestBe.getValue("PRI_NAME", null);
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_HOBBIES_INTEREST", hobbiesInterestBeName));

			BaseEntity clubBe = beUtils.getBaseEntityFromLNKAttr(newBe, "LNK_MENTOR_CLUB");
			String clubBeName = clubBe.getValue("PRI_NAME", null);
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_ROTARY_CLUB", clubBeName));

			BaseEntity user = beUtils.getBaseEntityByCode(newBe.getCode());
			String firstname = user.getValue("PRI_FIRSTNAME",null);
			String endPoint = GennySettings.projectUrl + "/v7/notes";
			QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), "ni", userToken.getUserCode(), "Added a Mentor: " + firstname, serviceToken.getToken());

			System.out.println("I just posted the note");
			System.out.println("Note endPoint: " +endPoint);
			System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());

			if(newBe != null) {
				System.out.println("newBe is " + newBe);

				QDataBaseEntityMessage mentorBeMsg = new QDataBaseEntityMessage(newBe);
				String priProfile = newBe.getValue("PRI_PROFILE",null);
				System.out.println("priUserProfile: "+ priProfile);
				mentorBeMsg.setToken(userToken.getToken());
				VertxUtils.writeMsg("webcmds", JsonUtils.toJson(mentorBeMsg));
			} else {
				System.out.println("newBe is null.");
			}
		}

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */

		retract(newBe)

		System.out.println("End of " + drools.getRule().getName());
end
