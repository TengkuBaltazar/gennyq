package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.ShleemyUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import org.apache.commons.lang3.ObjectUtils;
import life.genny.utils.validation.MessageValidator;
import life.genny.message.QMessageGennyMSG;
import life.genny.qwanda.entity.SearchEntity;

rule "REMIND_INTERN_PROCEED_APPLIED_48HR"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
   		$message : QEventMessage(data.code == "SCHEDULE_INTERN_PROCEED_APPLIED_48HR")
   		userToken : GennyToken  ()
		serviceToken : GennyToken (code == "PER_SERVICE" )

    then
 		System.out.println(drools.getRule().getName() + " : Rule fired" );
        System.out.println(drools.getRule().getName() + " : Rule fired at "+ LocalDateTime.now());

 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode: " +targetCode);

		String user = userToken.getUserCode();
		System.out.println("user: " +user);

		BaseEntity applicationBe = beUtils.getBaseEntityByCode(targetCode);
		System.out.println("applicationBe: "+applicationBe);
		if (applicationBe != null) {

			String appStatus = applicationBe.getValue("PRI_STATUS", null);
			System.out.println("appStatus = " + appStatus);

			if (appStatus.equals("APPLIED")){
				/* CHANGE CARD COLOUR */
				Answer answerColour = new Answer(serviceToken.getUserCode(), applicationBe.getCode(), "PRI_STATUS_COLOR", "warning");
				beUtils.saveAnswer(answerColour);
				System.out.println("Answer done" +answerColour);

				VertxUtils.sendToFrontEnd(userToken, answerColour);
				System.out.println("sendToFrontEnd done");

				QDataBaseEntityMessage msg = new QDataBaseEntityMessage(applicationBe);
				msg.setToken(userToken.getToken());

				SearchEntity searchBE = new SearchEntity(drools.getRule().getName(), "Agents")
					.addSort("PRI_NAME","Name",SearchEntity.Sort.ASC)
					.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%")
					.addFilter("PRI_IS_AGENT", true)
					.addColumn("PRI_NAME", "Name")

					.setPageStart(0).setPageSize(1000);

				searchBE.setRealm(serviceToken.getRealm());

				List<BaseEntity> results = beUtils.getBaseEntitys(searchBE);
				System.out.println("results: " +results);

				String[] rxList = new String[2];
				rxList[0] = "SUPERUSER";
				rxList[1] = "AGENT";
				msg.setRecipientCodeArray(rxList);

				VertxUtils.writeMsg("project", JsonUtils.toJson(msg));
				System.out.println("writeMsg done");

				/* CHECK WHO APPLIED */
				String appliedBy = applicationBe.getValue("PRI_APPLIED_BY", null);
				System.out.println("appliedBy = " + appliedBy);

				String internCode = applicationBe.getValue("PRI_INTERN_CODE", null);
				System.out.println("internCode = " + internCode);

				if (!appliedBy.equals(internCode)) {

                    /* Fetching internship from application */
                    BaseEntity internshipBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERNSHIP");
                    System.out.println("internshipBe: "+ internshipBe);

                    /* Fetching intern from application */
                    BaseEntity internBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "PRI_INTERN_CODE");
                    System.out.println("internBe: "+ internBe);

                    /* Fetching host company representative from application */
                    BaseEntity hcrBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERN_SUPERVISOR");
                    System.out.println("hcrBe: "+ hcrBe);
                    BaseEntity hcBe = null;
                    if(hcrBe != null){
                        /* Fetching host company from host company */
                        hcBe = beUtils.getBaseEntityFromLNKAttr(hcrBe, "LNK_HOST_COMPANY");
                        System.out.println("hcBe: "+ hcBe);
                    }

                    if(ObjectUtils.allNotNull(internBe,internshipBe,hcrBe, hcBe)){

                        Boolean isInternEmailBlank = MessageValidator.isMobileBlank(internBe);
                        System.out.println("isInternEmailBlank: "+ isInternEmailBlank);

                        if(!isInternEmailBlank){
                            /* Creating url for the applied application */
                            String url = new StringBuilder()
                                .append("SBE_APPLIED_APPLICATIONS_")
                                .append(userToken.getJTI().toUpperCase())
                                .append("/")
                                .append("ACT_PRI_EVENT_VIEW_APPLICATION")
                                .append("/")
                                .append(applicationBe.getCode())
                                .toString();

                            System.out.println("url: " + url);

                            /* Email is sent to the host company representative */
                            /* Building sendgrid msg and sending it */
                            QMessageGennyMSG sendGridMsg = new QMessageGennyMSG.Builder("MSG_IM_INTERN_APPLIED_REMINDER_48HRS")
                                .addRecipient(internBe)
                                .addContext("HC", hcBe)
                                .addContext("URL:ENCODE", url)
                                .setUtils(beUtils)
                                .send();

                            System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendGridMsg));
                            System.out.println("Sendgrid email sent to intern!!");
                        }

                        /*	String smsBody = "Hi " + internName + " - You've been registered as an intern on InternMatch. Verify your account and complete your profile here: https://internmatch-interns.gada.io";*/
                        /* send sms only if it's a production environment */
                        Boolean isInternMobileBlank = MessageValidator.isMobileBlank(internBe);
                        System.out.println("isInternMobileBlank: "+ isInternMobileBlank);

                        if (!isInternMobileBlank && !GennySettings.projectUrl.contains("dev")) {
                            /* Building sms msg and sending it */
                            QMessageGennyMSG internSmsMsg =  new QMessageGennyMSG.Builder("MSG_IM_SMS_INTERN_APPLIED_REMINDER_48HRS")
                                .addRecipient(internBe)
                                .setUtils(beUtils)
                                .send();
                           System.out.println("Sms msg: "+ JsonUtils.toJson(internSmsMsg));
                           System.out.println("Sms sent to intern!!");
                       }
                    }
                } else {
					System.out.println("Intern applied themselves, not sending email!");
				}
			} else {
				/* DELETE SCHEDULES */
				ShleemyUtils.deleteSchedule(serviceToken, applicationBe.getCode()+"_INTERN_PROCEED_APPLIED_48HR");
				ShleemyUtils.deleteSchedule(serviceToken, applicationBe.getCode()+"_INTERN_PROCEED_APPLIED_96HR");
			}
		} else {
			System.out.println("Application is NULL!!");
		}

		retract($message)
end
