package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.qwanda.utils.OutputParam;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import life.genny.qwandautils.JsonUtils;
import life.genny.message.QMessageGennyMSG;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;

rule "CONFIRM_MEETING_TIME_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(
		                            data.code matches "ACT_PRI_PRIMARY_AVAILABILITY"
		                            || data.code matches "ACT_PRI_SECONDARY_AVAILABILITY"
		                            || data.code matches "ACT_TERTIARY_AVAILABILITY"
                                )
		userToken : GennyToken (code != "PER_SERVICE")
		serviceToken : GennyToken (code == "PER_SERVICE")
 		beUtils : BaseEntityUtils()
 		output : OutputParam()
    then
        System.out.println(drools.getRule().getName() + " - Rule fired");

        String code = $message.getData().getCode();
        System.out.println("Selected availability code: " + code);

        String availabilityCode = code.substring(4);
        System.out.println("availabilityCode: " + availabilityCode);

        String menteeCode = $message.getData().getSourceCode();
        System.out.println("menteeCode: " + menteeCode);

        QCmdMessage toastMsg = new QCmdMessage("TOAST", "INFO");
                toastMsg.setMessage("Thanks for selecting time for the first meeting.");
                toastMsg.setToken(beUtils.getGennyToken().getToken());
                toastMsg.setSend(true);
                VertxUtils.writeMsg("webcmds", toastMsg);

        BaseEntity menteeBe = beUtils.quantumBe(menteeCode, "menteeBe");
        if (menteeBe != null) {
            BaseEntity applicationBe = beUtils.getBaseEntityFromLNKAttr(menteeBe, "LNK_APPLICATION");
            if (applicationBe != null) {
                System.out.println("applicationBeCode: " + applicationBe.getCode());
                beUtils.saveAnswer(new Answer(userToken.getUserCode(), applicationBe.getCode(), "PRI_STATUS", "MENTORING"));

                LocalDateTime meetingTime = applicationBe.getValue(availabilityCode, null);
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd MMM yyyy, E, hh:mm:ss a");
                String meetingTimeStr = dtf.format(meetingTime);
                System.out.println("meetingTimeStr: " + meetingTimeStr);

                applicationBe = beUtils.saveAnswer(new Answer(userToken.getUserCode(), applicationBe.getCode(), "PRI_MEET_AND_GREET_TIME", meetingTimeStr));
                beUtils.saveBaseEntity(applicationBe);

                System.out.println("#### Sending email to mentee for accepting meeting request ####");
                QMessageGennyMSG menteeMsg = new QMessageGennyMSG.Builder("MSG_MENTEE_MEET_AND_GREET_CONFIRMATION")
                    .addRecipient(menteeBe)
                    .addContext("APPLICATION", applicationBe)
                    .addContext("BCC", "PRJ_MENTORMATCH")
                    .setUtils(beUtils)
                    .send();
                System.out.println("MSG_MENTEE_MEET_AND_GREET_CONFIRMATION: menteeMsg " + JsonUtils.toJson(menteeMsg));

                BaseEntity mentorBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_MENTOR");
                if (mentorBe != null) {
                    System.out.println("Sending email to mentor for accepting meeting request");
                    QMessageGennyMSG mentorMsg = new QMessageGennyMSG.Builder("MSG_MENTOR_MEET_AND_GREET_CONFIRMATION")
                        .addRecipient(mentorBe)
                        .addContext("APPLICATION", applicationBe)
                        .addContext("BCC", "PRJ_MENTORMATCH")
                        .setUtils(beUtils)
                        .send();
                    System.out.println("MSG_MENTOR_MEET_AND_GREET_CONFIRMATION: mentorMsg " + JsonUtils.toJson(mentorMsg));
                } else {
                    System.out.println("ERROR: Mentor BE is NULL. Mail not sent.");
                }
            } else {
                System.out.println("ERROR: Application BE is NULL.");
            }
        } else {
            System.out.println("ERROR: Mentee BE is NULL. Mail not sent.");
        }

		output.setTypeOfResult("SIGNAL");
		output.setResultCode("START_AGREE_TO_MEETING");
		output.setAskSourceCode(menteeBe.getCode());
		output.setTargetCode(menteeBe.getCode());
		output.setSuitCase(availabilityCode);

		retract($message);
	end
