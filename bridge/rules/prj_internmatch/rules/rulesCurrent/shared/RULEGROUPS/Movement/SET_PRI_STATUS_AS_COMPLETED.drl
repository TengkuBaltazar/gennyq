package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.utils.TableUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.SearchUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;

rule "SET_PRI_STATUS_AS_COMPLETED"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		newApplication : BaseEntity()
		output : OutputParam()
		bucketCode : String(bucketCode.equals("PROGRESS"))
		controlSignalCode : String(controlSignalCode.equals("COMPLETED"))
		beUtils : BaseEntityUtils()

     then
 		System.out.println("SET_PRI_STATUS_AS_COMPLETED: Rule fired" );


 		Answer answer = new Answer(userToken.getUserCode(),newApplication.getCode(),"PRI_STATUS","COMPLETED");
 		beUtils.saveAnswer(answer);


		System.out.println("SET_PRI_STATUS_AS_COMPLETED: Answer = " + answer);
		System.out.println("SET_PRI_STATUS_AS_COMPLETED: newApplication = " + newApplication);

		TableUtils.moveEntity(newApplication.getCode(), "SBE_INPROGRESS_APPLICATIONS", null, beUtils);	
		
		
		/* Save status to the PER */ 
		String assocIntern = newApplication.getValue("PRI_INTERN_CODE", null);
		System.out.println("assocIntern: " +assocIntern);
		if (assocIntern != null){
			BaseEntity assocInternBe = beUtils.getBaseEntityByCode(assocIntern);
			System.out.println("assocInternBe: " +assocInternBe);
			
			String internStatus = assocInternBe.getValue("PRI_STATUS", null);
			System.out.println("internStatus: " +internStatus);
			
			if (internStatus.equals("AVAILABLE") || internStatus.equals("APPLIED") || internStatus.equals("SHORTLISTED") || internStatus.equals("INTERVIEWED") || internStatus.equals("OFFERED") || internStatus.equals("PLACED") || internStatus.equals("PROGRESS")){
				Answer answerStatus = new Answer(userToken.getUserCode(), assocInternBe.getCode(), "PRI_STATUS", "COMPLETED");
				beUtils.saveAnswer(answerStatus);
				System.out.println("answerStatus: " +answerStatus);
			}
			
			String appCode = newApplication.getCode();
        	System.out.println(appCode);
        
        	String[] strippedAppCode = appCode.split("-");
        	System.out.println(strippedAppCode[	0]);
        
        	String assocAppCode = "PRI_" +strippedAppCode[0];
        	System.out.println(assocAppCode);
        	
        	Answer answerApp = new Answer(userToken.getUserCode(), assocInternBe.getCode(), assocAppCode, appCode);
			beUtils.saveAnswer(answerApp);
			System.out.println("answerApp: " +answerApp);
			
			
			Answer answerDisable = new Answer(userToken.getUserCode(), assocInternBe.getCode(), "PRI_DISABLED", true);
			beUtils.saveAnswer(answerDisable);
			System.out.println("answerDisable: " +answerDisable);
			
			
		} else {
			System.out.println("$$$ assocIntern PRI_INTERN_CODE was null $$$");
		}
				
				
		/* GET INTERN DETAILS */
		String internName = null;
		BaseEntity internBE = beUtils.getBaseEntityFromLNKAttr(newApplication, "PRI_INTERN_CODE");
		if (internBE != null) {
			internName = internBE.getValue("PRI_NAME", null);
		}
		System.out.println("internName = " + internName);

		/* GET HC DETAILS */
		String internshipTitle = null;
		String hostCompanyName = null;
		BaseEntity internshipBE = beUtils.getBaseEntityFromLNKAttr(newApplication, "LNK_INTERNSHIP");
		if (internshipBE != null) {
			internshipTitle = internshipBE.getValue("PRI_NAME", null);

			BaseEntity hostCompanyBE = beUtils.getBaseEntityFromLNKAttr(internshipBE, "LNK_HOST_COMPANY");
			if (hostCompanyBE != null) {
				hostCompanyName = hostCompanyBE.getValue("PRI_NAME", null);
			}
		}
		System.out.println("internshipTitle = " + internshipTitle);
		System.out.println("hostCompanyName = " + hostCompanyName);
	
		String endPoint = GennySettings.projectUrl + "/v7/notes";
		/*String endPoint = "https://internmatch-cyrus.gada.io/v7/notes";*/
		
		String tag = "ni";
		
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), tag, newApplication.getCode(), internName + ", completed the internship " + internshipTitle + " at " + hostCompanyName, serviceToken.getToken());
		
		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());
	
		/* Re generate cached applications */
		SearchUtils.regenerateCaches(beUtils, newApplication);
		

		retract(newApplication)
		retract(bucketCode)
		retract(controlSignalCode)

end
