package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.message.QMessageGennyMSG;
import java.time.LocalDateTime;
import life.genny.utils.validation.MessageValidator;

rule "TRIGGER_LOGBOOK_REMINDER"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
   		$message : QEventMessage(data.code == "LOGBOOK_REMINDER")
   		userToken : GennyToken  ()
		serviceToken : GennyToken (code == "PER_SERVICE" )
    then
 		System.out.println(drools.getRule().getName() + " : Rule fired" );
        System.out.println(drools.getRule().getName() + " : Rule fired at "+ LocalDateTime.now());
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode: " +targetCode);

		BaseEntity applicationBe  = beUtils.getBaseEntityByCode(targetCode);
        System.out.println("applicationBe: "+ applicationBe);

		if (applicationBe != null) {
            /* Fetching Intern From Application */
			BaseEntity internBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "PRI_INTERN_CODE");
            System.out.println("internBe: "+ internBe);

            if(internBe != null){
                Boolean isInternEmailBlank = MessageValidator.isEmailBlank(internBe);
                System.out.println("isInternEmailBlank: "+ isInternEmailBlank);
                if(!isInternEmailBlank){
                    /* Email is sent to Intern */
                    /* Building sendgrid msg and sending it */
                    QMessageGennyMSG sendGridMsg = new QMessageGennyMSG.Builder("MSG_IM_INTERN_LOGBOOK_REMINDER")
                                          .addRecipient(internBe)
                                          .setUtils(beUtils)
                                          .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendGridMsg));
                    System.out.println("Sendgrid email sent to intern!!");
                }
            }else{
			    System.out.println("Intern is NULL!!");
            }
		} else {
			System.out.println("Application is NULL!!");
		}

		retract($message)
end
