package life.genny.rules;
import life.genny.models.GennyToken;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.SearchUtils;
import life.genny.qwandautils.GennySettings;
import life.genny.qwandautils.MessageUtils;
import life.genny.message.QMessageGennyMSG;
import life.genny.qwanda.message.QBaseMSGMessageType;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.validation.MessageValidator;
import life.genny.qwandautils.QwandaUtils;

rule "SET_PRI_STATUS_AS_OFFERED"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		newApplication : BaseEntity()
		bucketCode : String(bucketCode.equals("INTERVIEWED"))
		controlSignalCode : String(controlSignalCode.equals("OFFERED"))
		beUtils : BaseEntityUtils()

    then
        System.out.println(drools.getRule().getName() + " : Rule fired!! - newApplication = " + newApplication);
        newApplication = beUtils.getBaseEntityByCode(newApplication.getCode());

        Boolean sendOk = true;
        BaseEntity checkApp = beUtils.getBaseEntityByCode(newApplication.getCode());
        String status = checkApp.getValue("PRI_STATUS",null);
        if (status != null) {
            if ("OFFERED".equals(status)) {
                sendOk = false;
            }
        }

 		BaseEntity parentInternshipBe = beUtils.getBaseEntityFromLNKAttr(newApplication.getCode(), "LNK_INTERNSHIP");
		System.out.println(drools.getRule().getName() + " - parent internship BaseEntity: " + parentInternshipBe.getCode());

		String uncleanLimitInternsCode = parentInternshipBe.getValueAsString("LNK_NO_OF_INTERNS");
		String limitInternsCode = null;

		if (uncleanLimitInternsCode != null) {
			System.out.println("uncleanLimitInternsCode: " + uncleanLimitInternsCode);

			limitInternsCode = beUtils.cleanUpAttributeValue(uncleanLimitInternsCode);

			System.out.println("clean limitInternsCode: " + limitInternsCode);
		} else {
			System.out.println("ERROR:: uncleanLimitInternsCode null");
		}

		BaseEntity limitInternsBe = beUtils.getBaseEntityByCode(limitInternsCode);
		Integer currentNumberInterns = 0;

		if (limitInternsBe != null) {
			System.out.println("limitInternsBeCode: " + limitInternsBe.getCode());
			Integer limitNumberInterns = Integer.valueOf(limitInternsBe.getName());
			System.out.println("Integer limitNumberInterns: " + limitNumberInterns);

			String currentNoInternsString = parentInternshipBe.getValueAsString("PRI_CURRENT_INTERNS");

			if (currentNoInternsString != null && !currentNoInternsString.isEmpty()) {
				System.out.println("currentNoInternsString: " + currentNoInternsString);

				currentNumberInterns = Integer.valueOf(currentNoInternsString);

				System.out.println("Integer currentNumberInterns: " + currentNumberInterns);

				if (currentNumberInterns >= limitNumberInterns) {
					System.out.println("currentNumberInterns: " + currentNumberInterns + " || limitNumberInterns: " + limitNumberInterns);
					System.out.println(drools.getRule().getName() + " - INTERN LIMIT REACHED FOR " + parentInternshipBe.getCode());
					/* Turn off Internship */
					beUtils.saveAnswer(new Answer(userToken.getUserCode(), parentInternshipBe.getCode(), "PRI_STATUS", "FULL"));
					/* send cmd msg */
					String toastStr = "We're sure you know what you are doing, however this Internship was intended to have " + limitNumberInterns + " interns and this will make it " +(currentNumberInterns+1) + " interns";
					VertxUtils.sendCmdMsg(beUtils, "TOAST", "INFO", toastStr);
				} else {
					System.out.println("currentNumberInterns is lower than limitNumberInterns");
				}
			} else {
				System.out.println("ERROR:: currentNoInternsString null");
			}
		} else {
			System.out.println("ERROR:: limitInternsBe null");
		}

		/* SAVE APPLICATION AS OFFERED */
		Answer answer = new Answer(userToken.getUserCode(),newApplication.getCode(),"PRI_STATUS","OFFERED");
		answer.setChangeEvent(true);
		beUtils.saveAnswer(answer);

		Answer answerStage = new Answer(userToken.getUserCode(),newApplication.getCode(),"PRI_STAGE","OFFERED");
		answerStage.setChangeEvent(true);
 		beUtils.saveAnswer(answerStage);

		System.out.println("APP:: " + newApplication.getCode() + " SET_PRI_STATUS_AS_OFFERED: Answer = " + answer);
		System.out.println("SET_PRI_STATUS_AS_OFFERED: newApplication = " + newApplication);
		System.out.println("Increasing counter: parentInternshipBe = " + parentInternshipBe.getCode());

		/* Increment current counter */
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), parentInternshipBe.getCode(), "PRI_CURRENT_INTERNS", Integer.toString(currentNumberInterns+1)));
		System.out.println(drools.getRule().getName() + " - Intern Count now at " + Integer.toString(currentNumberInterns+1));

		/* Save status to the PER */
		String assocIntern = newApplication.getValue("PRI_INTERN_CODE", null);
		System.out.println("assocIntern: " +assocIntern);

		if (assocIntern != null){
			BaseEntity assocInternBe = beUtils.getBaseEntityByCode(assocIntern);
			System.out.println("assocInternBe: " +assocInternBe);

			String internStatus = assocInternBe.getValue("PRI_STATUS", null);
			System.out.println("internStatus: " +internStatus);

			if (internStatus.equals("AVAILABLE") || internStatus.equals("APPLIED") || internStatus.equals("SHORTLISTED") || internStatus.equals("INTERVIEWED")){
				Answer answerStatus = new Answer(userToken.getUserCode(), assocInternBe.getCode(), "PRI_STATUS", "OFFERED");
				beUtils.saveAnswer(answerStatus);
				System.out.println("answerStatus: " +answerStatus);
			}

			String appCode = newApplication.getCode();
			System.out.println(appCode);

			String[] strippedAppCode = appCode.split("-");
			System.out.println(strippedAppCode[0]);

			String assocAppCode = "PRI_" +strippedAppCode[0];
			System.out.println(assocAppCode);

			Answer answerApp = new Answer(userToken.getUserCode(), assocInternBe.getCode(), assocAppCode, appCode);
			beUtils.saveAnswer(answerApp);
			System.out.println("answerApp: " +answerApp);

		} else {
			System.out.println("$$$ assocIntern PRI_INTERN_CODE was null $$$");
		}

		/* GET INTERN DETAILS */
        BaseEntity agentBE = null;

		BaseEntity internBE = beUtils.getBaseEntityFromLNKAttr(newApplication, "PRI_INTERN_CODE");
		if (internBE != null) {
			agentBE = beUtils.getBaseEntityFromLNKAttr(internBE, "LNK_AGENT");
		} else {
            System.out.println("intern BE is NULL");
        }

        BaseEntity hostCompany = null;
        BaseEntity hostCompanyRep = null;
        /*BaseEntity supervisorBE = null;*/

        BaseEntity internship = beUtils.getBaseEntityFromLNKAttr(newApplication, "LNK_INTERNSHIP");
        if (internship != null) {
            hostCompany = beUtils.getBaseEntityFromLNKAttr(internship, "LNK_HOST_COMPANY");
            hostCompanyRep = beUtils.getBaseEntityFromLNKAttr(internship, "LNK_HOST_COMPANY_REP");
            /*supervisorBE = beUtils.getBaseEntityFromLNKAttr(internshipBE, "LNK_INTERN_SUPERVISOR");*/
        }

		TableUtils.moveEntity(newApplication.getCode(), "SBE_INTERVIEWED_APPLICATIONS", "SBE_OFFERED_APPLICATIONS", beUtils);

        String internUrl = new StringBuilder()
                        .append("SBE_OFFERED_APPLICATIONS_")
                        .append(userToken.getJTI().toUpperCase())
                        .append("/")
                        .append("ACT_PRI_EVENT_VIEW_APPLICATION")
                        .append("/")
                        .append(newApplication.getCode())
                        .toString();
        if (sendOk) {
            /* Send Email to Intern */
            QMessageGennyMSG sendGridInternMsg = new QMessageGennyMSG.Builder("MSG_INT7_OFFERED")
                .addRecipient(internBE)
                .addContext("HC", hostCompany)
                .addContext("HCR", hostCompanyRep)
                .addContext("INTERNSHIP", internship)
                .addContext("INTERN", internBE)
                .addContext("URL:ENCODE", internUrl)
                .addContext("BCC", "PRJ_INTERNMATCH")
                .setUtils(beUtils)
                .send();

            System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendGridInternMsg));
            System.out.println("Sendgrid email sent to intern!!");

            Boolean isInternMobileBlank = MessageValidator.isMobileBlank(internBE);
            System.out.println("isInternMobileBlank: "+ isInternMobileBlank);

            if (!isInternMobileBlank && !GennySettings.projectUrl.contains("dev")) {
                /* Building sms msg and sending it */
                QMessageGennyMSG internSmsMsg =  new QMessageGennyMSG.Builder("MSG_INT_SMS_OFFERED")
                    .addRecipient(internBE)
                    .setUtils(beUtils)
                    .send();
                System.out.println("Sms msg: "+ JsonUtils.toJson(internSmsMsg));
                System.out.println("Sms sent to intern!!");
            }


            /* Creating url for the agent */
            String agentUrl = new StringBuilder()
                .append("OFFERED_APPLICATIONS_")
                .append(userToken.getJTI().toUpperCase())
                .append("/")
                .append("ACT_PRI_EVENT_EDIT_AGREEMENT")
                .append("/")
                .append(newApplication.getCode())
                .toString();

            /* Change Template, URL and Recipient */
            QMessageGennyMSG sendGridAgentMsg = new QMessageGennyMSG.Builder("MSG_AGT7_OFFERED")
                .addRecipient(agentBE)
                .addContext("HC", hostCompany)
                .addContext("HCR", hostCompanyRep)
                .addContext("INTERNSHIP", internship)
                .addContext("INTERN", internBE)
                .addContext("URL:ENCODE", agentUrl)
                .addContext("BCC", "PRJ_INTERNMATCH")
                .setUtils(beUtils)
                .send();

            System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendGridAgentMsg));
            System.out.println("Sendgrid email sent to agent!!");

            String endPoint = GennySettings.projectUrl + "/v7/notes";
            QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), "ni", newApplication.getCode(), internBE.getCode() + ", was offered the internship " + internship.getCode() + " at " + hostCompany.getCode(), serviceToken.getToken());

            /* Re generate cached applications */
            SearchUtils.regenerateCaches(beUtils, newApplication);
        }

		retract(newApplication)
		retract(bucketCode)
		retract(controlSignalCode)

        System.out.println("End of " + drools.getRule().getName() + " :Rule for - newApplication = " + newApplication);
end
