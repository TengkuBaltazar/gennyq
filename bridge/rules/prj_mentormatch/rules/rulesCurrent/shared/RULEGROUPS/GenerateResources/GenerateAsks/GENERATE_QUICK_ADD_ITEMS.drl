package life.genny.rules;

import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import life.genny.qwandautils.JsonUtils;
import org.apache.logging.log4j.Logger;

import java.util.List;
import java.util.ArrayList;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwandautils.GennySettings;
import life.genny.qwanda.datatype.DataType;
import life.genny.qwanda.attribute.Attribute;
import life.genny.qwanda.Question;
import life.genny.qwanda.Ask;

rule "GENERATE_QUICK_ADD_ITEMS"
    ruleflow-group 'GenerateAsks'
     no-loop true
    when
       not  SearchEntity (code == "GENERATE_QUICK_ADD_ITEMS")
        serviceToken : GennyToken( code == "PER_SERVICE")
     then
     	System.out.println("   Generate "+drools.getRule().getName() );
     	BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken);

			String sourceCode = "PER_SERVICE";
			String targetCode = "PER_SERVICE";

			Attribute questionAttribute = new Attribute("QQQ_QUESTION_GROUP", "link", new DataType(String.class));
			Attribute eventAttribute = new Attribute("PRI_EVENT", "link", new DataType(String.class));

			/* ADD ITEMS group */
			Question addItemsQues = new Question("QUE_ADD_ITEMS_GRP", "Add Items", questionAttribute, true);
			Ask addItemsAsk = new Ask(addItemsQues, sourceCode, targetCode);

            Question menteeQues  = new Question("QUE_QA_MENTEE_MENU", "Mentee", eventAttribute, true);
            Ask menteeAsk = new Ask(menteeQues, sourceCode, targetCode);

            Question mentorQues  = new Question("QUE_QA_MENTOR_MENU", "Mentor", eventAttribute, true);
            Ask mentorAsk = new Ask(mentorQues, sourceCode, targetCode);

           /* Question agentQues  = new Question("QUE_QA_ADMIN_MENU", "Agent", eventAttribute, true); */
            /* Ask agentAsk = new Ask(agentQues, sourceCode, targetCode); */

			 Question clubPresidentQues  = new Question("QUE_QA_CLUB_PRESIDENT_MENU", "Club President", eventAttribute, true);
            Ask clubPresidentAsk = new Ask(clubPresidentQues, sourceCode, targetCode); 

			Ask[] agentAddItems = { menteeAsk, mentorAsk, clubPresidentAsk };
			Ask[] menteeAddItems = { };

			addItemsAsk.setChildAsks(agentAddItems);
			VertxUtils.putObject(serviceToken.getRealm(), "", "QUICK_ADD_ITEMS_AGENT", addItemsAsk, serviceToken.getToken());

			addItemsAsk.setChildAsks(menteeAddItems);
			VertxUtils.putObject(serviceToken.getRealm(), "", "QUICK_ADD_ITEMS_MENTEE", addItemsAsk, serviceToken.getToken());

		
end
