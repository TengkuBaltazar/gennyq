package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;
import java.time.format.DateTimeFormatter;


rule "CONFIRM_MEETING_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_CONFIRM_MEETING")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
 		beUtils : BaseEntityUtils()
    then

		System.out.println(drools.getRule().getName() + " - Rule fired");
		
		String code = $message.getData().getCode();
		String targetCode = userToken.getUserCode();
		System.out.println(drools.getRule().getName() + " :: targetCode: " + targetCode);
		
		BaseEntity targetBaseEntity = beUtils.getBaseEntityByCode(targetCode);
		
		String applicationCode = null;
 		
 		if (targetCode != null) {
			applicationCode = beUtils.quantumStrip(targetBaseEntity, "LNK_APPLICATION", "applicationCode");
			System.out.println(drools.getRule().getName() + " :: applicationCode: " + applicationCode);
		}

		BaseEntity applicationBe = beUtils.quantumBe(applicationCode, "application");
		
		String[] allAvailibility = new String[3];
		
		LocalDateTime primaryAvl = applicationBe.getValue("PRI_PRIMARY_AVAILABILITY", null);
		LocalDateTime secondaryAvl = applicationBe.getValue("PRI_SECONDARY_AVAILABILITY", null);
		LocalDateTime tertiaryAvl = applicationBe.getValue("PRI_TERTIARY_AVAILABILITY", null);
		
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("hh:mm:ss a, E, dd MMM yyyy");
		String primaryAvlStr = dtf.format(primaryAvl);
		String secondaryAvlStr = dtf.format(secondaryAvl);
		String tertiaryAvlStr = dtf.format(tertiaryAvl);
		
			
			allAvailibility[0] = primaryAvlStr;
			allAvailibility[1] = secondaryAvlStr;
			allAvailibility[2] = tertiaryAvlStr;
			
		/* Send BE to the FE */
			QDataBaseEntityMessage msg = new QDataBaseEntityMessage(applicationBe);
			msg.setToken(userToken.getToken());
			msg.setReplace(true);
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));
		
		retract($message);
	end
