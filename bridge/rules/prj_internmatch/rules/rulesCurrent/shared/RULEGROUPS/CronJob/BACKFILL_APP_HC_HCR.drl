package life.genny.rules;
import java.util.ArrayList;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import life.genny.utils.BucketUtils;

import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.utils.TableUtils;
import org.drools.core.spi.KnowledgeHelper;
import life.genny.qwanda.datatype.Allowed;
import java.time.LocalDate;

rule "BACKFILL_APP_HC_HCR"
	ruleflow-group 'EventProcessing'
	salience 10
	no-loop true
	when
		/*$message : QEventMessage(data.code == "ACT_PRI_EVENT_FINISH_APPLICATION")*/
		$message : QEventMessage(data.code == "QUE_BACKFILL_HC_TABLE" && data.parentCode == "QUE_BACKFILL_HC_TABLE_GRP" )
   		userToken : GennyToken ()
		serviceToken : GennyToken (code == "PER_SERVICE")
		output : OutputParam( )

	then
		System.out.println(drools.getRule().getName() + " triggered");
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
		
		
		
	    /* get all the apps from PROGRESS bucket */
	    SearchEntity appSearch = new SearchEntity("SBE_APP", "SBE_APP")
	            .addSort("PRI_STATUS","Status",SearchEntity.Sort.ASC)
	            .addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "APP_%")
	            .addFilter("PRI_STATUS", SearchEntity.StringFilter.LIKE, "%")
	            .addFilter("PRI_DISABLED", false)
					 
	            .addColumn("LNK_EDU_PROVIDER", "Linked Edu Pro")
	            .addColumn("LNK_HOST_COMPANY", "Linked HC")
	            .addColumn("PRI_INTERN_CODE", "Intern Code")
	            .setPageStart(0).setPageSize(1000);
	
	    appSearch.setRealm(serviceToken.getRealm());

		List<String> internsUpdated = new ArrayList<String>();
	 	List<String> internshipsUpdated = new ArrayList<String>();
	 	List<String> nullInterns = new ArrayList<String>();
	 	List<String> nullInternships = new ArrayList<String>();
	 	
	    try{
	        List<BaseEntity> apps = beUtils.getBaseEntitys(appSearch);
	        System.out.println("The number of apps is " + (apps == null ? "NULL" : apps.size()));
	        if ((apps != null) && (apps.size() > 0)) {
						
				Integer appIndex = 1;
	          	for (BaseEntity app : apps) {
			
					/*System.out.println("app = " +app);*/
		
					String appHC = app.getValue("LNK_HOST_COMPANY", null);
					/*System.out.println("appIntern = " +appIntern);*/
					if (appHC != null) {
							appHC = appHC.replace("\"", "").replace("[", "").replace("]", "");
							beUtils.quantumLink(userToken.getUserCode(), appHC, app.getCode(), "LNK_APPLICATIONS");
							internsUpdated.add("appHC :: " + app.getCode() + "    " + appHC);
					} else {
						/*System.out.println("appIntern is null");*/
						nullInterns.add("nullIntern :: " + app.getCode() + "    " + appHC);
					}
					
						
			
					String appHCR = app.getValue("LNK_INTERN_SUPERVISOR", null);
					/*System.out.println("appInternship = " +appInternship);*/
					if (appHCR != null) {
							appHCR = appHCR.replace("\"", "").replace("[", "").replace("]", "");
							/*System.out.println("appInternship = " +appInternship);*/
							beUtils.quantumLink(userToken.getUserCode(), appHCR, app.getCode(), "LNK_APPLICATIONS");
							internshipsUpdated.add("appHCR :: " + app.getCode() + "    " + appHCR);
														
			 		} else {
						/*System.out.println("appInternship is null");*/
						nullInternships.add("nullInternship :: " + app.getCode() + "    " + appHCR);
					}
					
					/*System.out.println("==============================================");*/
	        	}
	    	}
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	    
	    
	    System.out.println("============= INTERNS UPDATED =============");
	    for (String sd : internsUpdated) {
	        System.out.println(sd);
	    }
	   
	    System.out.println("============= INTERNSHIPS UPDATED =============");
	    for (String sd : internshipsUpdated) {
	        System.out.println(sd);
	    }
	
	    
	    
	    System.out.println("============= NULL INTERNS =============");
	    for (String sd : nullInterns) {
	        System.out.println(sd);
	    }
	   
	    System.out.println("============= NULL INTERNSHIPS =============");
	    for (String sd : nullInternships) {
	        System.out.println(sd);
	    }
	
	    
	    System.out.println("============= TOTALS =============");
	    
	    System.out.println("Total number of Interns updated: " + internsUpdated.size());
	    System.out.println("Total number of Internships updated: " + internshipsUpdated.size());    

	    
	    System.out.println("Total number of null Interns: " + nullInterns.size());
	    System.out.println("Total number of null Internships: " + nullInternships.size());

	    
		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");  /* dont display anything new */
		
	
	
		retract($message);
end
