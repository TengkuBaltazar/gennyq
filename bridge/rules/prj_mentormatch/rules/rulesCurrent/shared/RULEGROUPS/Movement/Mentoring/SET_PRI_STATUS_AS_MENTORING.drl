package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.EmailHelper;
import java.util.HashMap;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

rule "SET_PRI_STATUS_AS_MENTORING"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		targetBaseEntity : BaseEntity( code matches "PER_\\S+" )
		output : OutputParam()
		bucketCode : String(bucketCode.equals("MATCHED"))
		controlSignalCode : String(controlSignalCode.equals("MENTORING"))
		beUtils : BaseEntityUtils()
     then
 		System.out.println("SET_PRI_STATUS_AS_MENTORING: Rule fired" );

 		targetBaseEntity = beUtils.getBaseEntityByCode(targetBaseEntity.getCode());
 		System.out.println("SET_PRI_STATUS_AS_MENTORING: targetBaseEntity = " + targetBaseEntity);

 		String newApplicationCode = null;

 		if (targetBaseEntity.getCode() != null) {
			newApplicationCode = beUtils.quantumStrip(targetBaseEntity, "LNK_APP_CODE", "newApplication");
			System.out.println("SET_PRI_STATUS_AS_MENTORING:: newApplicationCode: " + newApplicationCode);
		}

		BaseEntity newApplication = beUtils.quantumBe(newApplicationCode, "newApplication");

 		Answer answer = new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_STATUS","MENTORING");
 		beUtils.saveAnswer(answer);

		System.out.println("SET_PRI_STATUS_AS_MENTORING: Answer = " + answer);
		System.out.println("SET_PRI_STATUS_AS_MENTORING: newApplication = " + newApplication);


		TableUtils.moveEntity(newApplication.getCode(), "SBE_MATCHED", "SBE_ROTARY_MENTORING", beUtils);


		LocalDateTime meetingTime = newApplication.getValue("PRI_MEETING_START_DATETIME", null);

		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("hh:mm:ss a, E, dd MMM yyyy");
		String meetingTimeStr = dtf.format(meetingTime);

		/* Get Mentee Details */
		String associatedMenteeBeCode = beUtils.quantumStrip(newApplication, "PRI_MENTEE_CODE", "associatedMenteeBeCode");

		System.out.println("SET_PRI_STATUS_AS_MENTORING:: associatedMenteeBeCode: " + associatedMenteeBeCode);

		BaseEntity associatedMenteeBe = beUtils.quantumBe(associatedMenteeBeCode, "associatedMenteeBe");

		if (associatedMenteeBe != null) {

			System.out.println("## Update Mentee Status ##");
			Answer answerMenteeStatus = new Answer(userToken.getUserCode(), associatedMenteeBe.getCode(), "PRI_MEETING_WITH_MENTOR", "COMPLETE");
			beUtils.saveAnswer(answerMenteeStatus);

			System.out.println("SENDING MESSAGE TO FRONTEND");

			QDataBaseEntityMessage menteeMsg = new QDataBaseEntityMessage(associatedMenteeBe);
			menteeMsg.setToken(userToken.getToken());
			menteeMsg.setReplace(true);
			VertxUtils.writeMsg("webcmds", JsonUtils.toJson(menteeMsg));

			System.out.println("Sending email to mentee for accepting meeting request");

			/* SEND EMAIL */
                String menteeEmail = associatedMenteeBe.getValue("PRI_EMAIL", null);
				String menteeName = associatedMenteeBe.getValue("PRI_NAME", null);
				if (menteeEmail != null) {

						String subject = "Congratulation!! Your mentor confirms the meeting.";
						String template_id = "d-25aafd3bd7e54b8eb84c3cf29cd9d917";

					    HashMap<String, String> templateData = new HashMap<>();

                        templateData.put("Mentee", menteeName);

                        System.out.println("-------- EMAIL DATA --------");
                        System.out.println("subject: " +subject);
						System.out.println("template_id: " +template_id);
						System.out.println("email: " + menteeEmail);
						System.out.println("Mentee: " +menteeName);
						System.out.println("----------------------------");

						if (!GennySettings.projectUrl.contains("dev")) {

								List<String> bccList = Arrays.asList("mentormatch@gada.io");
								EmailHelper.sendGrid(beUtils, menteeEmail, null, bccList, subject, template_id, templateData, true);
								System.out.println("Email Sent ||| email: "+ menteeEmail + " ||| Subject: " + subject + "||| template_id: " + template_id);

						} else {
								List<String> bccList = Arrays.asList("mentormatch@gada.io");
								EmailHelper.sendGrid(beUtils, menteeEmail, null, bccList, subject, template_id, templateData, true);
								System.out.println("Email Sent ||| email: "+ menteeEmail + " ||| Subject: " + subject + "||| template_id: " + template_id);

							System.out.println("WARNING: Email not sent because on Dev server");
						}
				} else {
					System.out.println("ERROR Null Mentee email");
				}
			}

		retract(newApplication)
		retract(bucketCode)
		retract(controlSignalCode)

end
