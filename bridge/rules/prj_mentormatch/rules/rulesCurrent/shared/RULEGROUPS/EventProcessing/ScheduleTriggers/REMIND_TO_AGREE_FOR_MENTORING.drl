package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.ShleemyUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.EmailHelper;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

rule "REMIND_TO_AGREE_FOR_MENTORING"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
   		$message : QEventMessage(data.code == "SCHEDULE_AGREE_TO_MENTORING_EMAIL")
   		userToken : GennyToken  ()
		serviceToken : GennyToken (code == "PER_SERVICE" )
		beUtils : BaseEntityUtils ()
     then
 		System.out.println(drools.getRule().getName() + " : Rule fired" );
 		System.out.println("Current Time is "+LocalDateTime.now());
		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode: " +targetCode);

		BaseEntity newApplication = beUtils.getBaseEntityByCode(targetCode);
		BaseEntity mentorBe = beUtils.getBaseEntityFromLNKAttr(newApplication, "LNK_MENTOR");

		System.out.println("^^^^^^^^^ mentorBeCode = " + mentorBe.getCode());

		BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+ serviceToken.getRealm().toUpperCase());

		if (mentorBe != null) {
			System.out.println("#### Sending email to agree to mentoring ####");

            QMessageGennyMSG msg = new QMessageGennyMSG.Builder("MSG_MENTOR_TO_AGREE_MEENTORING")
                .addRecipient(mentorBe)
                .addContext("URL:ENCODE", "QUE_FAKE_PARENT/ACT_MENTOR_MENTORING_AGREE")
                .addContext("BCC", "PRJ_MENTORMATCH")
                .setUtils(beUtils)
                .send();

			System.out.println("#### Sent email to agree to mentoring ####");
		} else {
            System.out.println("ERROR: Mentee BE is NULL");
		}
		
		retract($message)
end
