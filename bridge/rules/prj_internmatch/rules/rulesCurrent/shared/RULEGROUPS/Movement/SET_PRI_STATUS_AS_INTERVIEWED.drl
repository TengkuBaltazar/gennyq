package life.genny.rules;
import life.genny.rules.QRules;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.models.GennyToken;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwandautils.JsonUtils;
import java.time.LocalDateTime;
import life.genny.utils.TableUtils;
import life.genny.utils.SearchUtils;
import life.genny.qwandautils.GennySettings;
import life.genny.qwandautils.MessageUtils;
import life.genny.message.QMessageGennyMSG;
import life.genny.qwanda.message.QBaseMSGMessageType;
import java.time.ZoneOffset;
import life.genny.utils.ShleemyUtils;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwandautils.KeycloakUtils;
import org.apache.commons.lang3.ObjectUtils;
import life.genny.utils.validation.MessageValidator;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.ZoneId;
import java.text.SimpleDateFormat;
import java.util.Date;

rule "SET_PRI_STATUS_AS_INTERVIEWED"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		applicationBe : BaseEntity()
		bucketCode : String(bucketCode.equals("SHORTLISTED"))
		controlSignalCode : String(controlSignalCode.equals("INTERVIEWED"))
		beUtils : BaseEntityUtils()
    then
        System.out.println("#################### " + drools.getRule().getName() + " started firing ####################");
        System.out.println(drools.getRule().getName() + " : Rule fired at "+ LocalDateTime.now());

        String applicationCode = applicationBe.getCode();
        System.out.println("applicationCode: "+ applicationCode);

        /*Fetching the updated application be from the database*/
        applicationBe  = beUtils.getBaseEntityByCode(applicationCode);
        System.out.println("applicationBe: "+ applicationBe);

        if (applicationBe != null) {
            String applicationStatus = applicationBe.getValue("PRI_STATUS",null);
            Boolean isInterviewed = true;
            isInterviewed = !"INTERVIEWED".equals(applicationStatus);
            System.out.println("isInterviewed: "+isInterviewed);
            Answer answer = new Answer(userToken.getUserCode(),applicationBe.getCode(),"PRI_STATUS", "INTERVIEWED");
            answer.setChangeEvent(true);
            beUtils.saveAnswer(answer);

            System.out.println("Application PRI_STATUS saved:: " + answer);

            Answer answerStage = new Answer(userToken.getUserCode(),applicationBe.getCode(),"PRI_STAGE", "INTERVIEWED");
            answerStage.setChangeEvent(true);
            beUtils.saveAnswer(answerStage);

            System.out.println("Application PRI_STAGE saved:: " + answerStage);

             /*Fetching the updated application be from the database*/
            applicationBe  = beUtils.getBaseEntityByCode(applicationCode);

            System.out.println("########## Initializing required Objects ##########");
            BaseEntity internBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "PRI_INTERN_CODE");
            System.out.println("internBe:  " + internBe);
            BaseEntity agentBe = null;
            if ( internBe != null) {
                agentBe = beUtils.getBaseEntityFromLNKAttr(internBe, "LNK_AGENT");
                System.out.println("agentBe:  " + agentBe);
            }
            BaseEntity hcBe = null;
            BaseEntity hcrBe = null;
            BaseEntity internshipBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERNSHIP");
            System.out.println("internshipBe: "+internshipBe);
            BaseEntity interviewTypeBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERVIEW_TYPE");
            System.out.println("internshipTypeBe: "+interviewTypeBe);

            if (internshipBe != null) {
                hcBe = beUtils.getBaseEntityFromLNKAttr(internshipBe, "LNK_HOST_COMPANY");
                System.out.println("hcBe:  " + hcBe);
                hcrBe = beUtils.getBaseEntityFromLNKAttr(internshipBe, "LNK_HOST_COMPANY_REP");
                System.out.println("hcrBe:  " + hcrBe);
            }
            System.out.println("########## Initialized required Objects ##########");

            if (ObjectUtils.allNotNull(internBe, agentBe, internshipBe, interviewTypeBe, hcBe, hcrBe)) {
                String internStatus = internBe.getValue("PRI_STATUS", null);
                System.out.println("internStatus: " +internStatus);
                /* Updating Intern PRI_STATUS to interviewed */
                if (internStatus.equals("AVAILABLE") || internStatus.equals("APPLIED") || internStatus.equals("SHORTLISTED")) {
                    Answer answerStatus = new Answer(userToken.getUserCode(), internBe.getCode(), "PRI_STATUS", "INTERVIEWED");
                    beUtils.saveAnswer(answerStatus);
                    System.out.println("answerStatus: " +answerStatus);
                }

                TableUtils.moveEntity(applicationBe.getCode(), "SBE_SHORTLISTED_APPLICATIONS", "SBE_INTERVIEWED_APPLICATIONS", beUtils);

                System.out.println("#### Scheduling Shleemy Events ####");
                LocalDateTime now = LocalDateTime.now(ZoneOffset.UTC);

                String scheduleMsgCode48HR = applicationBe.getCode() + "_INTERN_INTERVIEWED_48HR";
                ShleemyUtils.scheduleMessage(
                    userToken,
                    "SCHEDULE_INTERN_INTERVIEWED_48HR",
                    scheduleMsgCode48HR,
                    now.plusHours(96),
                    applicationBe.getCode()
                );

                String scheduleMsgCode96HR = applicationBe.getCode() + "_INTERN_INTERVIEWED_96HR";
                ShleemyUtils.scheduleMessage(
                        userToken,
                        "SCHEDULE_INTERN_INTERVIEWED_96HR",
                        scheduleMsgCode96HR,
                        now.plusHours(96),
                        applicationBe.getCode()
                );

                Boolean isInternEmailBlank = MessageValidator.isEmailBlank(internBe);
                System.out.println("isInternEmailBlank: "+ isInternEmailBlank);

                if (isInterviewed && !isInternEmailBlank) {
                   /* Creating url for the applied application */
                    String internUrl = new StringBuilder()
                        .append("SBE_INTERVIEWED_APPLICATIONS_")
                        .append(userToken.getJTI().toUpperCase())
                        .append("/")
                        .append("ACT_PRI_EVENT_VIEW_APPLICATION")
                        .append("/")
                        .append(applicationBe.getCode())
                        .toString();

                    System.out.println("intern email attached url: "+internUrl);
                    /* Send Email to Intern */
                    QMessageGennyMSG sendGridInternMsg = new QMessageGennyMSG.Builder("MSG_INT5_INTERVIEWED")
                        .addRecipient(internBe)
                        .addContext("HC", hcBe)
                        .addContext("HCR", hcrBe)
                        .addContext("INTERNSHIP", internshipBe)
                        .addContext("APPLICATION", applicationBe)
                        .addContext("TYPE", interviewTypeBe)
                        .addContext("URL:ENCODE", internUrl)
                        .addContext("DATETIMEFORMAT","E, MMM dd yyyy HH:mm:ss")
                        .setUtils(beUtils)
                        .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendGridInternMsg));
                    System.out.println("Sendgrid email sent to intern!!");
                }

                Boolean isInternMobileBlank = MessageValidator.isMobileBlank(internBe);
                System.out.println("isInternMobileBlank: "+ isInternMobileBlank);

                if (!isInternMobileBlank && !GennySettings.projectUrl.contains("dev")) {
                    /* Building sms msg and sending it */
                    QMessageGennyMSG internSmsMsg =  new QMessageGennyMSG.Builder("MSG_INT_SMS_INTERVIEWED")
                        .addRecipient(internBe)
                        .setUtils(beUtils)
                        .send();
                    System.out.println("Sms msg: "+ JsonUtils.toJson(internSmsMsg));
                    System.out.println("Sms sent to intern!!");
                }

                Boolean isHcrSendEmail = hcrBe.getValue("PRI_EMAIL_FLAG", false);
                System.out.println("isHcrSendEmail: "+isHcrSendEmail);
                Boolean isHcrEmailBlank = MessageValidator.isEmailBlank(hcrBe);
                System.out.println("isHcrEmailBlank: "+ isHcrEmailBlank);

                /* Used for both hcr and agent email */
                String url = new StringBuilder()
                    .append("SBE_INTERVIEWED_APPLICATIONS_")
                    .append(userToken.getJTI().toUpperCase())
                    .append("/")
                    .append("ACT_PRI_EVENT_VIEW")
                    .append("/")
                    .append(applicationBe.getCode())
                    .toString();

                if (isHcrSendEmail && !isHcrEmailBlank) {
                    System.out.println("hcr email attached url: "+ url);

                    /* Get HC timezone for HCR and update date time for Interview */
                    LocalDateTime interviewDateTime = applicationBe.getValue("PRI_INTERVIEW_START_DATETIME", null);
                    System.out.println("interviewDateTime = " + interviewDateTime);
                    ZonedDateTime zdt = ZonedDateTime.of(interviewDateTime, ZoneId.of("UTC"));
                    System.out.println("zdt = " + zdt);

                    DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                    DateTimeFormatter timeFormat = DateTimeFormatter.ofPattern("HH:mm:ss z");

                    String timezone = hcBe.getValue("PRI_TIMEZONE_ID", null);
                    System.out.println("timezone = " + timezone);

                    if (timezone != null && !timezone.isEmpty()) {
                    	System.out.println("Timezone found from HC, changing datetime for HCR...");
                    	zdt = zdt.withZoneSameInstant(ZoneId.of(timezone));
                    	System.out.println("zdt After zoning: " + zdt);
                    }

                    String date = zdt.format(dateFormat);
                    String time = zdt.format(timeFormat);

                    try {
                    	SimpleDateFormat _24HourSDF = new SimpleDateFormat("HH:mm");
                    	SimpleDateFormat _12HourSDF = new SimpleDateFormat("hh:mm a");
                    	Date _24HourDt = _24HourSDF.parse(time);

                    	System.out.println("24 Hour Time:: " + _24HourDt);
                    	System.out.println("12 Hour Time:: " + _12HourSDF.format(_24HourDt));

                    	if (_12HourSDF.format(_24HourDt) != null) {
                    		time = _12HourSDF.format(_24HourDt);
                    	}
                    } catch (Exception e) {
                    	e.printStackTrace();
                    }

                    System.out.println("date: " +date);
                    System.out.println("time: " +time);

                    /* Send Email to Host Company Representative */
                    QMessageGennyMSG sendgridHcrMsg = new QMessageGennyMSG.Builder("MSG_HCR4_INTERVIEWED")
                        .addRecipient(hcrBe)
                        .addContext("HC", hcBe)
                        .addContext("INTERN", internBe)
                        .addContext("INTERNSHIP", internshipBe)
                        .addContext("TYPE", interviewTypeBe)
                        .addContext("DATE_INTERVIEW", date)
                        .addContext("TIME_INTERVIEW", time)
                        .addContext("URL:ENCODE", url)
                        .setUtils(beUtils)
                        .send();

                    System.out.println("BCC: "+ sendgridHcrMsg.getMessageContextMap().get("BCC"));

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendgridHcrMsg));
                    System.out.println("Sendgrid email sent to host company representative!!");
                }

                Boolean isAgentEmailBlank = MessageValidator.isEmailBlank(agentBe);
                System.out.println("isAgentEmailBlank: "+ isAgentEmailBlank);

                if(!isAgentEmailBlank){
                    System.out.println("agent email attached url: "+ url);

                    /* Send Email to Agent */
                    QMessageGennyMSG sendgridAgentMsg = new QMessageGennyMSG.Builder("MSG_AGT5_INTERVIEWED")
                        .addRecipient(agentBe)
                        .addContext("HC", hcBe)
                        .addContext("HCR", hcrBe)
                        .addContext("INTERN", internBe)
                        .addContext("INTERNSHIP", internshipBe)
                        .addContext("APPLICATION", applicationBe)
                        .addContext("TYPE", interviewTypeBe)
                        .addContext("URL:ENCODE", url)
                        .addContext("DATETIMEFORMAT","E, MMM dd yyyy HH:mm:ss")
                        .setUtils(beUtils)
                        .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendgridAgentMsg));
                    System.out.println("Sendgrid email sent to agent!!");
                }

                /* Post a note */
                String endPoint = GennySettings.projectUrl + "/v7/notes";
                String content = new StringBuilder()
                    .append(internBe.getCode())
                    .append(", has an interview for the internshipBe ")
                    .append(internshipBe.getCode())
                    .append(" at ")
                    .append(hcBe.getCode())
                    .toString();

                QwandaUtils.apiPostNote(
                    endPoint,
                    userToken.getUserCode(),
                    "ni",
                    applicationBe.getCode(),
                    content,
                    serviceToken.getToken()
                );

                /* Regenerate cached applications */
                SearchUtils.regenerateCaches(beUtils, applicationBe);

            }else{
                System.out.println("Required Objects are NULL");
            }
        }else{
            System.out.println("ApplicationBe is NULL");
        }

        System.out.println("#################### " + drools.getRule().getName() + " finished firing ####################");

    retract(applicationBe)
    retract(bucketCode)
    retract(controlSignalCode)
end
