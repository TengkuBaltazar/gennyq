package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.ShleemyUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import org.apache.commons.lang3.ObjectUtils;
import life.genny.message.QMessageGennyMSG;
import java.time.LocalDateTime;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.validation.MessageValidator;

rule "REMIND_INTERN_PROCEED_APPLIED_96HR"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
   		$message : QEventMessage(data.code == "SCHEDULE_INTERN_PROCEED_APPLIED_96HR")
   		userToken : GennyToken  ()
		serviceToken : GennyToken (code == "PER_SERVICE" )

    then
 		System.out.println(drools.getRule().getName() + " : Rule fired" );
        System.out.println(drools.getRule().getName() + " : Rule fired at "+ LocalDateTime.now());

 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode: " +targetCode);

		String user = userToken.getUserCode();
		System.out.println("user: " +user);

		BaseEntity applicationBe = beUtils.getBaseEntityByCode(targetCode);

		if (applicationBe != null) {

			String appStatus = applicationBe.getValue("PRI_STATUS", null);
			System.out.println("appStatus = " + appStatus);

			if (appStatus.equals("APPLIED")){
				/* CHANGE CARD COLOUR */
				Answer answerColour = new Answer(serviceToken.getUserCode(), applicationBe.getCode(), "PRI_STATUS_COLOR", "error");
				beUtils.saveAnswer(answerColour);
				System.out.println("Answer done" +answerColour);

				VertxUtils.sendToFrontEnd(userToken, answerColour);
				System.out.println("sendToFrontEnd done");


				/* PUBLISH CARD COLOUR */
				QDataBaseEntityMessage msg = new QDataBaseEntityMessage(applicationBe);
				msg.setToken(userToken.getToken());

				SearchEntity searchBE = new SearchEntity(drools.getRule().getName(), "Agents")
					.addSort("PRI_NAME","Name",SearchEntity.Sort.ASC)
					.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%")
					.addFilter("PRI_IS_AGENT", true)
					.addColumn("PRI_NAME", "Name")
					.setPageStart(0).setPageSize(1000);

				searchBE.setRealm(serviceToken.getRealm());

				List<BaseEntity> results = beUtils.getBaseEntitys(searchBE);
				System.out.println("results: " +results);

				String[] rxList = new String[2];
				rxList[0] = "SUPERUSER";
				rxList[1] = "AGENT";
				msg.setRecipientCodeArray(rxList);

				VertxUtils.writeMsg("project", JsonUtils.toJson(msg));
				System.out.println("writeMsg done");

				/* CHECK WHO APPLIED */
				String appliedBy = applicationBe.getValue("PRI_APPLIED_BY", null);
				System.out.println("appliedBy = " + appliedBy);

				String internCode = applicationBe.getValue("PRI_INTERN_CODE", null);
				System.out.println("internCode = " + internCode);

				if (!appliedBy.equals(internCode)) {

					/* Fetching internship from application */
                    BaseEntity internshipBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERNSHIP");
                    System.out.println("internshipBe: "+ internshipBe);

                    /* Fetching intern from application */
                    BaseEntity internBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "PRI_INTERN_CODE");
                    System.out.println("internBe: "+ internBe);

                    /* Fetching host company representative from application */
                    BaseEntity hcrBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERN_SUPERVISOR");
                    System.out.println("hcrBe: "+ hcrBe);

                    BaseEntity hcBe = null;
                    if(hcrBe != null){
                        /* Fetching host company from host company */
                        hcBe = beUtils.getBaseEntityFromLNKAttr(hcrBe, "LNK_HOST_COMPANY");
                        System.out.println("hcBe: "+ hcBe);
                    }

                    /* Fetching agent from application */
                    BaseEntity agentBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_AGENT");
                    System.out.println("agentBe: "+ agentBe);
                    String url = "";
                    if(ObjectUtils.allNotNull(internBe,internshipBe,hcrBe, hcBe,agentBe)){

                        Boolean isInternEmailBlank = MessageValidator.isMobileBlank(internBe);
                        System.out.println("isInternEmailBlank: "+ isInternEmailBlank);

                        if(!isInternEmailBlank){
                            /* Creating url for the applied application */
                            url = new StringBuilder()
                                .append("SBE_APPLIED_APPLICATIONS_")
                                .append(userToken.getJTI().toUpperCase())
                                .append("/")
                                .append("ACT_PRI_EVENT_VIEW_APPLICATION")
                                .append("/")
                                .append(applicationBe.getCode())
                                .toString();

                            System.out.println("url: " + url);

                            /* Email is sent to the host company representative */
                            /* Building sendgrid msg and sending it */
                            QMessageGennyMSG sendgridInternMsg = new QMessageGennyMSG.Builder("MSG_IM_INTERN_APPLIED_REMINDER_96HRS")
                                                    .addRecipient(internBe)
                                                    .addContext("HC", hcBe)
                                                    .addContext("URL:ENCODE", url)
                                                    .setUtils(beUtils)
                                                    .send();

                            System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendgridInternMsg));
                            System.out.println("Sendgrid email sent to intern!!");

                        }

                        url = new StringBuilder()
                                .append("SBE_INTERNS_")
                                .append(userToken.getJTI().toUpperCase())
                                .append("/")
                                .append("ACT_PRI_EVENT_VIEW")
                                .append("/")
                                .append(applicationBe.getCode())
                                .toString();

                        QMessageGennyMSG sendgridAgentMsg = new QMessageGennyMSG.Builder("MSG_IM_AGENT_INTERN_NOT_ACCEPTED_APPLICATION")
                                              .addRecipient(agentBe)
                                              .addContext("INTERN", internBe)
                                              .addContext("URL:ENCODE", url)
                                              .setUtils(beUtils)
                                              .send();

                        System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendgridAgentMsg));
                        System.out.println("Sendgrid email sent to agent!!");

                    }else{
                       System.out.println("Required Object is NULL!!");
                    }
				} else {
					System.out.println("Intern applied themselves, not sending email!");
				}
			} else {
				/* DELETE SCHEDULES */
				ShleemyUtils.deleteSchedule(serviceToken, applicationBe.getCode()+"_INTERN_PROCEED_APPLIED_96HR");
			}
		} else {
			System.out.println("Application is NULL");
		}

		retract($message)
end
