package life.genny.rules;


import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import life.genny.qwandautils.JsonUtils;
import org.apache.logging.log4j.Logger;


import java.util.List;
import java.util.ArrayList;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwandautils.GennySettings;

rule "SBE_LINKED_INTERNSHIP_OPP"
	ruleflow-group 'GenerateSearches'
	no-loop true
	when
		not  SearchEntity (code == "SBE_LINKED_INTERNSHIP_OPP")
		SearchEntity (code == "SBE_INTERNSHIPS")
		serviceToken : GennyToken( code == "PER_SERVICE")
	then
		System.out.println("   Generate "+drools.getRule().getName() );
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken);

		TableUtils tableUtils = new TableUtils(beUtils);
		SearchEntity searchBE = tableUtils.copySearch("SBE_INTERNSHIPS","SBE_LINKED_INTERNSHIP_OPP");

		if(searchBE != null){
			searchBE.setTitle("Internship Opportunities");
			searchBE.addFilter("PRI_STATUS", SearchEntity.StringFilter.EQUAL, "Active");
			searchBE.setDisplayMode("NESTED");
			insert(searchBE);
			VertxUtils.putObject(serviceToken.getRealm(), "", searchBE.getCode(), searchBE, serviceToken.getToken());
		}else{
			System.out.println("SBE_INTERNSHIPS not in cache, Cannot generate " + drools.getRule().getName());
		}
end
