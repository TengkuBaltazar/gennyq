package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.models.BaseEntityImport;
import io.vavr.Tuple;
import io.vavr.Tuple2;
import life.genny.utils.ImportUtils;
import life.genny.qwanda.datatype.Allowed;
import life.genny.utils.CapabilityUtils;
import java.util.UUID;
import java.time.LocalDateTime;
import life.genny.qwandautils.QwandaUtils;

import life.genny.qwandautils.GennySettings;


import java.util.Optional;
import life.genny.utils.BaseEntityUtils;




rule "FIX_MISSING_SUPERVISORS"
    ruleflow-group 'DataProcessing'
        salience 500
        no-loop true
    when
 	  beUtils : BaseEntityUtils()
 	  allowed : Allowed(code == "SEARCHBAR_CMDS" || code == "TEST") 
	  answer : Answer( attributeCode == "PRI_SEARCH_TEXT" && (value.startsWith("fixmissingsupervisors:")) )   /* this is a pure search */
	  serviceToken : GennyToken (code == "PER_SERVICE")
	  output : OutputParam( )
    then
  		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer);
   		retract(answer);
   		
		SearchEntity searchBE = new SearchEntity("SBE_SEARCH", "Fix Missing Supervisors")
				.addSort("PRI_CODE", "Created", SearchEntity.Sort.ASC)
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "BEG_%") 
				.addColumn("PRI_ASSOC_HOST_COMPANY_EMAIL", "Host Company Rep Email")
				.addColumn("LNK_INTERN_SUPERVISOR", "Supervisor")
				.addColumn("LNK_HOST_COMPANY_REP", "Host Company Rep")
				.setPageStart(0)
				.setPageSize(20000);
		
		searchBE.setRealm(serviceToken.getRealm());
		
 		String jsonSearchBE = JsonUtils.toJson(searchBE);
 		/* System.out.println(jsonSearchBE); */
		String resultJson;
		BaseEntity result = null; 
		try {
			resultJson = QwandaUtils.apiPostEntity(GennySettings.qwandaServiceUrl + "/qwanda/baseentitys/search",
					jsonSearchBE, serviceToken.getToken());
				QDataBaseEntityMessage resultMsg = JsonUtils.fromJson(resultJson, QDataBaseEntityMessage.class);
				BaseEntity[] bes = resultMsg.getItems();
				System.out.println("Processing "+resultMsg.getItems().length+" Internships");
				Map<String,BaseEntity> supervisors = new HashMap<String,BaseEntity>();
				for (BaseEntity be : bes) {

					BaseEntity hcr = null;
					BaseEntity supervisor = null;
					String lnkHCR = null;
					
					System.out.println("Processing Internship "+be.getCode());
					Optional<String> optEmail = be.getValue("PRI_ASSOC_HOST_COMPANY_EMAIL");
					Optional<String> optHCR = be.getValue("LNK_HOST_COMPANY_REP");
					Optional<String> optSupervisor = be.getValue("LNK_INTERN_SUPERVISOR");
					if (optHCR.isPresent()) {
						String hcrCode = optHCR.get();
						System.out.println("HCR found is"+hcrCode);
						if ((hcrCode != null)&&(hcrCode.length() > 2)) {
							hcrCode = hcrCode.substring(2,hcrCode.length()-2);
							System.out.println("HCR = "+hcrCode);
							hcr = beUtils.getBaseEntityByCode(hcrCode); 
						} else {
							System.out.println("BAD HCRCODE !!!");
						}
						
					}
					if (optEmail.isPresent()) {
						
						String email = optEmail.get();
						System.out.println("Setting Host Company Rep"+email);
						System.out.println("Email = "+email);
						String code = "PER_"+QwandaUtils.getNormalisedUsername(email);
						if (!optHCR.isPresent()) {
							 lnkHCR = "[\""+code+"\"]";
							beUtils.saveAnswer(new Answer(be.getCode(),be.getCode(),"LNK_HOST_COMPANY_REP",lnkHCR));
						}
					}
					
					if (!optSupervisor.isPresent()) {
							System.out.println("Setting Supervisor "+lnkHCR);
							if (lnkHCR != null) {
								beUtils.saveAnswer(new Answer(be.getCode(),be.getCode(),"LNK_INTERN_SUPERVISOR",lnkHCR));
							} else 
							if (hcr != null) {
								lnkHCR = "[\""+hcr.getCode()+"\"]";
								beUtils.saveAnswer(new Answer(be.getCode(),be.getCode(),"LNK_INTERN_SUPERVISOR",lnkHCR));
								
								beUtils.saveAnswer(new Answer(hcr.getCode(),hcr.getCode(),"PRI_IS_SUPERVISOR",true));
								beUtils.saveAnswer(new Answer(hcr.getCode(),hcr.getCode(),"PRI_DISABLED",false));
							}
					} else {
						
						/* Fix supervisor */
						String supervisorCode = optSupervisor.get();
						System.out.println("Supervisor found is"+supervisorCode);
						if ((supervisorCode != null)&&(supervisorCode.length() > 2)) {
							supervisorCode = supervisorCode.substring(2,supervisorCode.length()-2);
							System.out.println("SUPERVISOR = "+supervisorCode);
							supervisor = beUtils.getBaseEntityByCode(supervisorCode); 
							if (supervisor != null) {
								beUtils.saveAnswer(new Answer(supervisor.getCode(),supervisor.getCode(),"PRI_IS_SUPERVISOR",true));
								beUtils.saveAnswer(new Answer(supervisor.getCode(),supervisor.getCode(),"PRI_DISABLED",false));
							} else {
								System.out.println("NO SUPERVISOR EXISTS !!!");
							}						} else {
							System.out.println("BAD SUPERVISOR CODE !!!");
						}

					}

				}
				System.out.println("Finished Fixing Journals");
		} catch (Exception e1) {
			e1.printStackTrace();
		}
	
		output.setTypeOfResult("NO_PROCESSING");
  	    output.setResultCode("NONE");  /* dont display anything new */
		
		
end
