package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.ShleemyUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.utils.validation.MessageValidator;
import life.genny.message.QMessageGennyMSG;
import java.time.LocalDateTime;
import life.genny.qwanda.entity.SearchEntity;

rule "REMIND_INTERN_COMPLETE_PROFILE_96HR"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
   		$message : QEventMessage(data.code == "SCHEDULE_INTERN_COMPLETE_PROFILE_96HR")
   		userToken : GennyToken  ()
		serviceToken : GennyToken (code == "PER_SERVICE" )

    then
 		System.out.println(drools.getRule().getName() + " : Rule fired" );
        System.out.println(drools.getRule().getName() + " : Rule fired at "+ LocalDateTime.now());

        BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

        String targetCode = $message.getData().getTargetCode();
        System.out.println("targetCode: " +targetCode);

		BaseEntity internBe = beUtils.getBaseEntityByCode(targetCode);
		System.out.println("internBe: "+internBe);

		if (internBe != null) {
            String profile = internBe.getValue("PRI_PROFILE", null);
            System.out.println("profile = " + profile);

			if (profile.equals("Incomplete") || profile.equals("InComplete")) {
				/* CHANGE CARD COLOUR */
				Answer answerColour = new Answer(serviceToken.getUserCode(), internBe.getCode(), "PRI_STATUS_COLOR", "error");
				beUtils.saveAnswer(answerColour);
				System.out.println("Answer done" +answerColour);

				VertxUtils.sendToFrontEnd(userToken, answerColour);
				System.out.println("sendToFrontEnd done");

				/* PUBLISH CARD COLOUR */
				BaseEntity targetBE  = beUtils.getBaseEntityByCode(targetCode);

				QDataBaseEntityMessage msg = new QDataBaseEntityMessage(targetBE);
				msg.setToken(userToken.getToken());

				SearchEntity searchBE = new SearchEntity(drools.getRule().getName(), "Agents")
					.addSort("PRI_NAME","Name",SearchEntity.Sort.ASC)
					.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "PER_%")
					.addFilter("PRI_IS_AGENT", true)
					.addColumn("PRI_NAME", "Name")
					.setPageStart(0).setPageSize(1000);

				searchBE.setRealm(serviceToken.getRealm());

				List<BaseEntity> results = beUtils.getBaseEntitys(searchBE);
				System.out.println("results: " +results);

				String[] rxList = new String[2];
				rxList[0] = "SUPERUSER";
				rxList[1] = "AGENT";
				/*rxList[2] = "PER_5A666E64-021F-48CE-8111-BE3D66901F9C";*/
				msg.setRecipientCodeArray(rxList);

				/*VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));*/
				VertxUtils.writeMsg("project", JsonUtils.toJson(msg));
				System.out.println("writeMsg done");

                /* Fetching agent from application */
                BaseEntity agentBe = beUtils.getBaseEntityFromLNKAttr(internBe, "LNK_AGENT");
                System.out.println("agentBe: "+ agentBe);

                Boolean isInternEmailBlank = MessageValidator.isEmailBlank(internBe);
                System.out.println("isInternEmailBlank: "+ isInternEmailBlank);

                if(!isInternEmailBlank){
                    QMessageGennyMSG internSendgridMsg = new QMessageGennyMSG.Builder("MSG_IM_INTERN_VERIFICATION_REMINDER_96HRS")
                        .addRecipient(internBe)
                        .addContext("URL:ENCODE", "QUE_FAKE_PARENT/QUE_FINISH_INTERN")
                        .setUtils(beUtils)
                        .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(internSendgridMsg));
                    System.out.println("Sendgrid email sent to Intern!!");
                }

                Boolean isInternMobileBlank = MessageValidator.isMobileBlank(internBe);
                System.out.println("isInternMobileBlank: "+ isInternMobileBlank);

                /* send sms only if it's a production environment */
                if (!isInternMobileBlank && !GennySettings.projectUrl.contains("dev")) {
                    /* Building sms msg and sending it */
                    QMessageGennyMSG smsInternMsg =  new QMessageGennyMSG.Builder("MSG_IM_SMS_INTERN_VERIFICATION_REMINDER_96HRS")
                       .addRecipient(internBe)
                       .setUtils(beUtils)
                       .send();
                    System.out.println("Sms msg: "+ JsonUtils.toJson(smsInternMsg));
                    System.out.println("Sms sent to Intern!!");
                }

                if(agentBe != null) {
                    /* Creating url for the applied application */
                    String url = new StringBuilder()
                       .append("SBE_INTERNS_")
                       .append(userToken.getJTI().toUpperCase())
                       .append("/")
                       .append("ACT_PRI_EVENT_VIEW")
                       .append("/")
                       .append(internBe.getCode())
                       .toString();

                    Boolean isAgentEmailBlank = MessageValidator.isEmailBlank(internBe);
                    System.out.println("isAgentEmailBlank: "+ isAgentEmailBlank);

                    if(!isAgentEmailBlank){
                        QMessageGennyMSG agentSendgridMsg = new QMessageGennyMSG.Builder("MSG_IM_AGENT_INTERN_INCOMPLETE_VERIFICATION")
                            .addRecipient(agentBe)
                            .addContext("INTERN", internBe)
                            .addContext("URL:ENCODE", url)
                            .setUtils(beUtils)
                            .send();

                        System.out.println("Sendgrid msg: "+ JsonUtils.toJson(agentSendgridMsg));
                        System.out.println("Sendgrid email sent to Agent!!");
                    }
                }else{
                    System.out.println("AgentBe is NULL");
                }
			} else if (profile.equals("Complete")) {
				/* DELETE SCHEDULES */
				ShleemyUtils.deleteSchedule(userToken, internBe.getCode()+"_INTERN_COMPLETE_PROFILE_96HR");
			}
		} else {
			System.out.println("InternBe is NULL");
		}
    retract($message)
end
