package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;


rule "SCHEDULE_MENTORING_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_PRI_EVENT_SCHEDULE_MENTORING")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
 		ruleDetails : RuleDetails()
    then

		System.out.println(drools.getRule().getName() + " - Rule fired");

		/* QUE_FINISH_MENTOR */

		String code = $message.getData().getCode();
		System.out.println(drools.getRule().getName() +" :: code: " +code);

		String user = userToken.getUserCode();
		System.out.println(drools.getRule().getName() +" :: user: " + user);
		
		String targetCode = $message.getData().getTargetCode();
		System.out.println(drools.getRule().getName() +" :: targetCode: " +targetCode);

        /* Set userToken and serviceToken */
        /*output.setUserToken(userToken);
        output.setServiceToken(serviceToken);*/

        /* Set result */
        output.setTypeOfResult("SIGNAL");
		output.setResultCode("START_MENTORING");
		output.setAskSourceCode(user);
		/* targetCode is the BaseEntity we want to finish */
		output.setTargetCode(targetCode);
		System.out.println(drools.getRule().getName() +" :: Workflow started " + output.getResultCode());
		retract( $message);
	end
