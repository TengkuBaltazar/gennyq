package life.genny.rules;
import life.genny.models.GennyToken;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.message.QMessageGennyMSG;
import life.genny.qwandautils.GennySettings;

/*
	Called from QUICK_ADD_ENTITY.bpmn
	To add a Mentor in the system and Keycloaks, notify the user with an email.
*/

rule "IS_QA_MENTOR"
    ruleflow-group 'IsQuickAdd'
    no-loop true
    salience 1000
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam()
		baseEntityType : String(baseEntityType.equals("QA_MENTOR"))
		newBe : BaseEntity()
		beUtils: BaseEntityUtils()

    then
 		System.out.println(drools.getRule().getName() + ": Rule fired :: newBe = " + newBe.getCode());

		newBe = beUtils.getBaseEntityByCode(newBe.getCode());
		/* GET & SAVE REQUIRED DATA */
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_MENTOR_CODE", newBe.getCode()));
 		beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_STATUS", "PENDING"));

		/* Update Email and Name, and set Random Password in Keycloak */
		KeycloakUtils.updateUserDetails(beUtils, newBe);
		String password = "password1";
		if(GennySettings.projectUrl.contains("dev")){
            String uuid = newBe.getValue("PRI_UUID", null);
            KeycloakUtils.setPassword(beUtils.getServiceToken().getToken(), beUtils.getServiceToken().getRealm(), uuid, password, true);
		}else{
		    password = KeycloakUtils.generateRandomPassword(beUtils, newBe);
		}

        System.out.println("Created User in Keycloak with password:" + password);

        System.out.println("#### Sending email to Mentor after quick add ####");

        QMessageGennyMSG msg = new QMessageGennyMSG.Builder("MSG_MENTOR1_REGISTER")
            .addRecipient(newBe)
            .addContext("PASSWORD", password)
            .addContext("URL:ENCODE", "QUE_FAKE_PARENT/QUE_FINISH_MENTOR")
            .addContext("BCC", "PRJ_MENTORMATCH")
            .setUtils(beUtils)
            .send();

        System.out.println("MSG_MENTOR1_REGISTER: msg " + JsonUtils.toJson(msg));

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");

		retract(newBe)

		System.out.println("End of " + drools.getRule().getName());
end