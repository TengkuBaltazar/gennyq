package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;

rule "TRIGGER_NOTIFY_HC_REP_EMAIL_RED"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
   		$message : QEventMessage(data.code == "SCHEDULE_SHORTLIST_RED")
   		userToken : GennyToken  ()
		serviceToken : GennyToken ( code == "PER_SERVICE" )

     then
 		System.out.println(drools.getRule().getName() + " : Rule fired" );
 		System.out.println("Current Time is "+LocalDateTime.now());
 		
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
		
		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode: " +targetCode);
		
		BaseEntity targetBE  = beUtils.getBaseEntityByCode(targetCode);
		if (targetBE != null) {
                /* Find the supervisor name and email */

                BaseEntity hcRepBE = beUtils.getBaseEntityFromLNKAttr(targetBE, "LNK_INTERN_SUPERVISOR");

				String email = null;
				String hcRepName = null;
				Boolean sendEmail = null;
				String hcName = null;

				if (hcRepBE != null) {
					email = hcRepBE.getValue("PRI_EMAIL", null);
					hcRepName = hcRepBE.getValue("PRI_NAME", null);
					sendEmail = hcRepBE.getValue("PRI_EMAIL_FLAG", false);

					BaseEntity hostCompanyBE = beUtils.getBaseEntityFromLNKAttr(hcRepBE, "LNK_HOST_COMPANY");

					if (hostCompanyBE != null) {
						hcName = hostCompanyBE.getValue("PRI_NAME", null);
					}
				}
				System.out.println("email: " + email);
				System.out.println("hcRepName: " + hcRepName);
				System.out.println("sendEmail = " + sendEmail);
				System.out.println("hcName: " + hcName);

                BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+ serviceToken.getRealm().toUpperCase());
                String token = KeycloakUtils.getImpersonatedToken(serviceToken.getKeycloakUrl(), serviceToken.getRealm(), project, email, serviceToken.getToken());
                System.out.println("token: " + token);

                String urlParentCode = "SBE_SHORTLISTED_APPLICATIONS_"+userToken.getJTI().toUpperCase();
                String urlCode = "ACT_PRI_EVENT_VIEW_APPLICATION";
                String urlTargetCode = targetBE.getCode();

                /* Encode each section of the url */
                urlParentCode = new String(Base64.getEncoder().encode(urlParentCode.getBytes()));
                urlCode = new String(Base64.getEncoder().encode(urlCode.getBytes()));
                urlTargetCode = new String(Base64.getEncoder().encode(urlTargetCode.getBytes()));
            
                String url = GennySettings.projectUrl+"/home/"+urlParentCode+"/"+urlCode+"/"+urlTargetCode;
                System.out.println("url: " + url);
                
                url = url +"?token=" + token;
                System.out.println("url with token: " + url);

				if (email != null) {
					if (sendEmail) {
						/* String url = GennySettings.projectUrl+"/home/UVVFX0ZBS0VfUEFSRU5U/UVVFX0ZJTklTSF9JTlRFUk4="; */
						String subject = "Let's organise an interview!";
						String template_id = "d-0a16a9d67e2f425b8bfa191dcb9fb6bc";
						/*email = "c.pyke85@gmail.com";*/
						email = "internmatch@outcomelife.com.au";
						
						HashMap<String, String> templateData = new HashMap<String, String>();

						templateData.put("hostCompanyRepName", hcRepName);
						templateData.put("url", url);
					
						EmailHelper.sendGrid(beUtils, email, subject, template_id, templateData, false);
						System.out.println("SUCCESS - Email Sent!!");

						/* SEND EMAIL TO OUTCOME STAFF */
						/*email = "c.pyke85@gmail.com";*/
						email = "internmatch@outcomelife.com.au";
						subject = "It has been 96 hours and still no action!";
						template_id = "d-232d763453e24d06b78a4b330212bfd1";

						templateData = new HashMap<String, String>();
						templateData.put("hostCompanyName", hcName);
						templateData.put("hostCompanyRepName", hcRepName);

						EmailHelper.sendGrid(beUtils, email, subject, template_id, templateData, false);

					} else {
						System.out.println("sendEmail is FALSE");
					}

				} else {
					System.out.println("ERROR Null name");
				}
		} else {
			System.out.println("ERROR Null targetBE");
		}
				

		retract($message)


end
