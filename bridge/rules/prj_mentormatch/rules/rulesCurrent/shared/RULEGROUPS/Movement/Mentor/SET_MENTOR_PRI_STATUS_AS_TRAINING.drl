package life.genny.rules;

import life.genny.models.GennyToken;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.TableUtils;
import life.genny.message.QMessageGennyMSG;

rule "SET_MENTOR_PRI_STATUS_AS_TRAINING"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		associatedMentorBe : BaseEntity()
		output : OutputParam()
		bucketCode : String(bucketCode.equals("VERIFIED"))
		controlSignalCode : String(controlSignalCode.equals("MENTOR_TRAINING"))
    then
 		System.out.println(drools.getRule().getName() + " : Rule fired");
 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		/* Refresh the BaseEntity because mysterious reasons Chris told me... he said, "Donâ€™t ask me why. The rules suck" */
 		associatedMentorBe = beUtils.getBaseEntityByCode(associatedMentorBe.getCode());
		System.out.println("SET_MENTOR_PRI_STATUS_AS_MATCHED: associatedMentorBe = " + associatedMentorBe);

 		Answer answer = new Answer(userToken.getUserCode(),associatedMentorBe.getCode(),"PRI_STATUS","AVAILABLE");
 		beUtils.saveAnswer(answer);

		System.out.println("SENDING MESSAGE TO FRONTEND");

		QDataBaseEntityMessage msg = new QDataBaseEntityMessage(associatedMentorBe);
		msg.setToken(userToken.getToken());
		msg.setReplace(true);
		VertxUtils.writeMsg("webcmds", JsonUtils.toJson(msg));

		System.out.println("SET_MENTOR_PRI_STATUS_AS_TRAINING: Answer = " + answer);
		System.out.println("SET_MENTOR_PRI_STATUS_AS_TRAINING: associatedMentorBe = " + associatedMentorBe);

		TableUtils.moveEntity(associatedMentorBe.getCode(), "SBE_ON_SHORE", "SBE_Mentor_TRAINING", beUtils);

	    /* Send email to Mentor for completing training */
	     System.out.println("#### Sending email to Mentor after completing training ####");

        QMessageGennyMSG metorMsg = new QMessageGennyMSG.Builder("MSG_MENTOR_TRAINING_COMPLETE")
            .addRecipient(associatedMentorBe)
            .addContext("BCC", "PRJ_MENTORMATCH")
            .setUtils(beUtils)
            .send();

        System.out.println("MSG_MENTOR_TRAINING_COMPLETE: msg " + JsonUtils.toJson(metorMsg));

		retract(associatedMentorBe)
		retract(bucketCode)
		retract(controlSignalCode)

        System.out.println("End of " + drools.getRule().getName());
end
