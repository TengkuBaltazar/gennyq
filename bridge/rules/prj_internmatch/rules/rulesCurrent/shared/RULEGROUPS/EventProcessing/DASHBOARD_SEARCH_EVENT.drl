package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;


rule "DASHBOARD_SEARCH_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_SEARCH_DASHBOARD")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken( code == "PER_SERVICE")
		output : OutputParam( )
 		ruleDetails : RuleDetails()
 		beUtils : BaseEntityUtils()
    then

		System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing : " + $message );
		CapabilityUtils capabilityUtils = new CapabilityUtils(beUtils);
		
		String sessionCode = beUtils.getGennyToken().getJTI().toUpperCase();
		System.out.println("userCode   ::   " + userToken.getUserCode());
		System.out.println("sessionCode   ::   " + sessionCode);

		/* get BUCKET_CODES from cache */
		List<String> bucketCodes = VertxUtils.getObject(serviceToken.getRealm(), "", "BUCKET_CODES", List.class);
		List<String> sendCodes = new ArrayList<>();
		List<SearchEntity> searchBeList = new ArrayList<SearchEntity>();
		String value = $message.getData().getValue();

		System.out.println("bucketCodes:");
		System.out.println(bucketCodes);

		if(bucketCodes!= null && bucketCodes.size() > 0){

			for (String code : bucketCodes) {
				if (capabilityUtils.hasCapabilityThroughPriIs(code, CapabilityMode.VIEW)) {
					System.out.println("Has Permission for capabilityUtils.hasCapabilityThroughPriIs(code, CapabilityMode.VIEW) " + code);
					sendCodes.add(code);
				}
			}
			System.out.println("Adding sessionCode");

			List<String> sbeSessionCodes = sendCodes.stream().map(code -> code+"_"+sessionCode).collect(Collectors.toList());

			System.out.println("1. Sending bucketCodes !");
			System.out.println(sbeSessionCodes);
			
			if (!sbeSessionCodes.isEmpty()) {
				VertxUtils.sendCmdMsg(beUtils, "BUCKET_CODES", "BUCKET_CODES", sbeSessionCodes);
			}
			
			String sbeCodes = sbeSessionCodes.toString().replace("[", "").replace("]", "").replace(" ", "");
			System.out.println("sbeCodes  :: " + sbeCodes);
			
			for (String sbeCode : sbeCodes.split(",")) {
				System.out.println("sbeCode  " + sbeCode);
				searchBeList.add(VertxUtils.getObject(beUtils.getGennyToken().getRealm(), "", sbeCode, SearchEntity.class));
			}
			
			for (SearchEntity sbe : searchBeList) {
				System.out.println(drools.getRule().getName()+" ASSIST for "+sbe.getCode()); 
	
				/* Reset the pageNumber to 1 */
				Answer pageNumberAnswer = new Answer(beUtils.getGennyToken().getUserCode(), sbe.getCode(), "PRI_INDEX", "1");
	
				/* update the sbe object */
				sbe = beUtils.updateBaseEntity(sbe, pageNumberAnswer,SearchEntity.class);
				sbe.setWildcard(value);
				sbe.setPageStart(0);
				
				/* cache the updated sbe  */
				VertxUtils.putObject(beUtils.getGennyToken().getRealm(), "", sbe.getCode(), sbe, beUtils.getGennyToken().getToken());
	
				/* send the data */
				TableUtils.searchTable(beUtils,sbe, true);
			}
			/* Send summary arrayCodes */
			/*if (!sbeSessionCodes.isEmpty()) {
				VertxUtils.sendCmdMsg(beUtils, "BUCKET_CODES", "BUCKET_CODES", sbeSessionCodes);
			}

			/*for (String code : sendCodes) {
				long totalTime = TableUtils.searchTable(beUtils, code, true);
				System.out.println("total took " + (totalTime) + " ms"); 
			}*/

		}
		retract( $message);
	end
