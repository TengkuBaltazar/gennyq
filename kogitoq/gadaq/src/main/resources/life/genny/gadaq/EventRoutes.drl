package life.genny.gadaq;

import javax.json.Json;
import javax.json.JsonObject;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwandaq.message.QEventMessage;
import life.genny.qwandaq.models.UserToken;
import life.genny.qwandaq.utils.KafkaUtils;
import life.genny.qwandaq.utils.DefUtils;
import life.genny.qwandaq.utils.GraphQLUtils;
import life.genny.kogito.common.utils.KogitoUtils;

ruleflow-group 'EventRoutes'

rule RouteAuthInit 
when
	msg: QEventMessage( data.code == "AUTH_INIT" )
	kogitoUtils : KogitoUtils()
then
	kogitoUtils.triggerWorkflow("authInit", "eventMessage", msg);
	retract(msg);
end

rule RouteSubmit 
when
	msg: QEventMessage( data.code == "QUE_SUBMIT" )
	kogitoUtils : KogitoUtils()
then
	String processId = msg.getData().getProcessId();
	kogitoUtils.sendSignal("processQuestions", processId, "submit", "");
	retract(msg);
end

rule RouteCancel 
when
	msg: QEventMessage( data.code == "QUE_CANCEL" )
	kogitoUtils : KogitoUtils()
then
	String processId = msg.getData().getProcessId();
	kogitoUtils.sendSignal("processQuestions", processId, "cancel", "");
	retract(msg);
end

rule RouteReset 
when
	msg: QEventMessage( data.code == "QUE_RESET" )
	kogitoUtils : KogitoUtils()
then
	String processId = msg.getData().getProcessId();
	kogitoUtils.sendSignal("processQuestions", processId, "reset", "");
	retract(msg);
end

rule RouteView 
when
	msg: QEventMessage( data.code matches "QUE_.*_VIEW" || data.code == "ACT_VIEW" )
	kogitoUtils : KogitoUtils()
then
	kogitoUtils.triggerWorkflow("view", "eventMessage", msg);
	retract(msg);
end

rule RouteAddItem 
when
	msg: QEventMessage( data.code matches "QUE_ADD_.*" )
	kogitoUtils : KogitoUtils()
	userToken : UserToken()
	defUtils : DefUtils()
then
	System.out.println("Routing Add Item!");
	String code = StringUtils.removeStart(msg.getData().getCode(), "QUE_ADD_");
	String prefix = defUtils.getDefPrefix(userToken.getProductCode(), "DEF_"+code);

	System.out.println("Prefix = " + prefix);

	/* NOTE: This is very very temporary */
	if (!"DEF_TENANT".equals(code) && !"DEF_ADMIN".equals(code) && !"PER".equals(prefix)) {
		return;
	}

	JsonObject json = Json.createObjectBuilder()
		.add("definitionCode", "DEF_"+code)
		.add("sourceCode", userToken.getUserCode())
		.build();

	kogitoUtils.triggerWorkflow("personLifecycle", json);
	retract(msg);
end

rule RouteUpdateSummary 
when
	msg: QEventMessage( data.code == "UPDATE_SUMMARY" )
	kogitoUtils : KogitoUtils()
	gqlUtils : GraphQLUtils()
then
	String processId = gqlUtils.fetchProcessId("personLifecycle", "entityCode", msg.getData().getTargetCode());
	System.out.println("PID = " + processId);
	kogitoUtils.sendSignal("personLifecycle", processId, "update_summary", "summary", msg.getData().getParentCode());
	retract(msg);
end

rule RouteTreeItems 
when
	msg: QEventMessage( data.code matches "QUE_TREE_ITEM_.*" )
	kogitoUtils : KogitoUtils()
then
	kogitoUtils.triggerWorkflow("view", "eventMessage", msg);
	retract(msg);
end

/**
 * If no route exists within gadaq, the message should be
 * sent to the project specific service.
 */
rule ForwardEvent
salience 0
when
	msg: QEventMessage()
then
	System.out.println("Forwarding Event Message...");
	KafkaUtils.writeMsg("genny_events", msg);
	retract(msg);
end

