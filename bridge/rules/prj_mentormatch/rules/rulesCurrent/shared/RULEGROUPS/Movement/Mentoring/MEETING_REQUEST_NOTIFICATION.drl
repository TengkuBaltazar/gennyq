package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.EmailHelper;
import java.util.HashMap;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

rule "MEETING_REQUEST_NOTIFICATION"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		newApplication : BaseEntity(code matches "APP_\\S+" )
		output : OutputParam()
		bucketCode : String(bucketCode.equals("MENTORING"))
		controlSignalCode : String(controlSignalCode.equals("MEETING_REQUEST_NOTIFICATION"))
     then
 		System.out.println(drools.getRule().getName() + " Rule fired" );
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);
		BaseEntity menteeBe = null;
		BaseEntity mentorBe = null;
 		BaseEntity applicationBe = beUtils.getBaseEntityByCode(newApplication.getCode());

		System.out.println(drools.getRule().getName() + " :: newApplication = " + applicationBe.getCode());

		if (applicationBe !=null)
			{
				menteeBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_MENTEE");
				System.out.println(drools.getRule().getName() + " :: menteeCode: " + menteeBe.getCode());
				mentorBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_MENTOR");
				System.out.println(drools.getRule().getName() + " :: menteeCode: " + mentorBe.getCode());
			}

		/* Changing status of Mentee and Application to Mentoring*/
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), menteeBe.getCode(), "PRI_STATUS" , "MENTORING"));
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), applicationBe.getCode(), "PRI_STATUS" , "MENTORING"));
		beUtils.saveBaseEntity(menteeBe);
		beUtils.saveBaseEntity(applicationBe); 	


		LocalDateTime meetingTime = applicationBe.getValue("PRI_MEETING_START_DATETIME", null);
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd MMM yyyy, E, hh:mm:ss a");

		LocalDateTime mentoringSession = meetingTime;
		ArrayList<LocalDateTime> mentoringSessionLst = new ArrayList<LocalDateTime>();
		BaseEntity newMentoringSessions = null;
		BaseEntity defBE = beUtils.getDEFByCode("DEF_MEETING");
		for(int i = 1 ; i<=12 ; i++){
			newMentoringSessions = beUtils.create(defBE);
			System.out.println("newMentoringSessions = " + newMentoringSessions);
			if(i==1)
			{
				mentoringSessionLst.add(mentoringSession);
			}else {
				mentoringSession = mentoringSession.plusHours(336);
				mentoringSessionLst.add(mentoringSession);
			}
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), applicationBe.getCode(), "LNK_MTS_"+ i , newMentoringSessions.getCode()));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newMentoringSessions.getCode(), "PRI_MEETING_TIME" , mentoringSession));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newMentoringSessions.getCode(), "LNK_MENTEE" , menteeBe.getCode()));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newMentoringSessions.getCode(), "LNK_MENTOR" , mentorBe.getCode()));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newMentoringSessions.getCode(), "LNK_APPLICATION" , newApplication.getCode()));
			beUtils.saveAnswer(new Answer(userToken.getUserCode(), newMentoringSessions.getCode(), "PRI_STATUS" , "UNFINISHED"));
			newMentoringSessions = beUtils.saveBaseEntity(defBE,newMentoringSessions);
			beUtils.saveBaseEntity(applicationBe); 
		}
		/*beUtils.saveAnswer(new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_CURRENT_MEETING" , "PRI_MENTORING_MEETING_1"));*/
		

		TimeUnit.SECONDS.sleep(30);
		TableUtils.searchTable(beUtils,"SBE_MENTORING_MEETINGS", true, "LNK_APPLICATION", applicationBe.getCode());
		if (menteeBe != null) {
			System.out.println("#### Sending email to mentee for created meeting request ####");

            QMessageGennyMSG msg = new QMessageGennyMSG.Builder("MSG_MENTEE_TO_MENTORING_DATES")
                .addRecipient(menteeBe)
                .addContext("APPLICATION", applicationBe)
				.addContext("DATETIMEFORMAT", "dd MMM yyyy, E, hh:mm:ss a")
                .addContext("BCC", "PRJ_MENTORMATCH")
                .setUtils(beUtils)
                .send();

			System.out.println("#### Sent email to mentee for created meeting request ####");
		} else {
            System.out.println("ERROR: Mentee BE is NULL");
		}

		if (mentorBe != null) {
			System.out.println("#### Sending email to mentor for created meeting request ####");

            QMessageGennyMSG msg = new QMessageGennyMSG.Builder("MSG_MENTOR_TO_MENTORING_DATES")
                .addRecipient(mentorBe)
                .addContext("APPLICATION", applicationBe)
				.addContext("DATETIMEFORMAT", "dd MMM yyyy, E, hh:mm:ss a")
				.addContext("URL:ENCODE", "QUE_FAKE_PARENT/ACT_MENTORING_TIME_AGREE")
                .addContext("BCC", "PRJ_MENTORMATCH")
                .setUtils(beUtils)
                .send();

			System.out.println("#### Sent email to mentor for created meeting request ####");
		} else {
            System.out.println("ERROR: Mentee BE is NULL");
		}
		
		retract(newApplication)
		retract(bucketCode)
		retract(controlSignalCode)

end
