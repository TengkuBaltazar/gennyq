package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.Answers;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.qwandautils.KeycloakUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.models.BaseEntityImport;
import io.vavr.Tuple;
import io.vavr.Tuple2;
import life.genny.utils.ImportUtils;
import life.genny.qwanda.datatype.Allowed;
import life.genny.utils.CapabilityUtils;
import java.util.UUID;
import life.genny.rules.listeners.GennyRuleTimingListener;
import life.genny.utils.TableUtils;



rule "COMPANY_IMAGE_APP"
	ruleflow-group 'DataProcessing'
	salience -100
	no-loop true
	
	when
 	  beUtils : BaseEntityUtils()
 	  allowed : Allowed(code == "USER") 
	  answer : Answer( targetCode matches "CPY_.*" && attributeCode matches "PRI_IMAGE_URL")   
	  userToken : GennyToken (code != "PER_SERVICE" )
	  serviceToken : GennyToken( code == "PER_SERVICE")
	  ruleDetails : RuleDetails()
		answersToSave : Answers()
	then
		
		System.out.println("Rule -> "+drools.getRule().getName()+" :  user=" + beUtils.getGennyToken().getUserCode()+" : "+answer);
 		
		BaseEntity person = beUtils.getBaseEntityByCode(answer.getTargetCode());
		
		Boolean isHostCpy = person.is("PRI_IS_HOST_CPY");

		if (isHostCpy) {
			
			/* copy across the new cpy image to an internship */
			SearchEntity searchBE = new SearchEntity(drools.getRule().getName(), "Update")
				.addSort("PRI_NAME", "Created", SearchEntity.Sort.ASC)
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "BEG_%") 
				.addFilter("LNK_HOST_COMPANY", SearchEntity.StringFilter.LIKE, "%"+answer.getTargetCode()+"%") 
				.setPageStart(0)
				.setPageSize(100);
		
			searchBE.setRealm(serviceToken.getRealm());
		
 			System.out.println("About to search for internships");
			List<BaseEntity> bes = beUtils.getBaseEntitys(searchBE);

			for (BaseEntity internship : bes) {
				beUtils.saveAnswer(new Answer(userToken.getUserCode(), internship.getCode(), "PRI_IMAGE_URL", answer.getValue(),false,false));
			}

			/* get all the apps with LNK_HOST_COMPANY attribute equal to targetCode */

			String companyCode = "[\"" +  answer.getTargetCode() +"\"]";

			SearchEntity sbe = new SearchEntity(drools.getRule().getName(), "Update")
				.addSort("PRI_NAME", "Created", SearchEntity.Sort.ASC)
				.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "APP_%")
				.addFilter("LNK_HOST_COMPANY", SearchEntity.StringFilter.EQUAL, companyCode) 
				.addColumn("PRI_CODE", "Name")
				.addColumn("LNK_HOST_COMPANY", "Host Company")
				.setPageStart(0).setPageSize(100000);

			sbe.setRealm(serviceToken.getRealm());

			System.out.println("About to search for apps");
			List<BaseEntity> apps = beUtils.getBaseEntitys(sbe);

			for (BaseEntity app : apps) {
				beUtils.saveAnswer(new Answer(userToken.getUserCode(), app.getCode(), "PRI_IMAGE_SECONDARY", answer.getValue(),false,false));
			}	
		}
		
end
