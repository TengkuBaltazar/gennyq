package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import org.apache.commons.lang3.StringUtils;
import life.genny.qwanda.message.QCmdMessage;
import life.genny.utils.VertxUtils;


rule "START_MENTEE_TRAINING"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
		$message : QEventMessage(data.code matches "ACT_PRI_EVENT_START_MENTEE_TRAINING")
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
 		ruleDetails : RuleDetails()
    then

		System.out.println(drools.getRule().getName() + " - Rule fired");

		String code = $message.getData().getCode();
		System.out.println("code: " +code);

		String key = StringUtils.removeStart(code, "ACT_PRI_EVENT_START_MENTEE_TRAINING");
		System.out.println("key: " +key);

		String user = userToken.getUserCode();
		System.out.println("user: " + user);

        /* Set result */
        output.setTypeOfResult("SIGNAL");
		output.setResultCode("START_MENTEE_TRAINING");

		output.setSuitCase(key);
		output.setAskSourceCode(user);
		output.setTargetCode(user);


		System.out.println("**************************************************");
		System.out.println("TypeOfResult: "  + output.getTypeOfResult());
		System.out.println("ResultCode: "    + output.getResultCode());
		System.out.println("SuitCase: "      + output.getSuitCase());
		System.out.println("AskSourceCode: " + output.getAskSourceCode());
		System.out.println("TargetCode: "    + output.getTargetCode());
		System.out.println("**************************************************");

		retract( $message);
	end
