package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.SearchUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import java.util.Optional;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.entity.SearchEntity;

rule "SET_PRI_STATUS_AS_PROGRESS"
	ruleflow-group 'Movement'
	no-loop true
	salience 1
	when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		newApplication : BaseEntity()
		output : OutputParam()
		bucketCode : String(bucketCode.equals("PLACED"))
		controlSignalCode : String(controlSignalCode.equals("PROGRESS"))
		beUtils : BaseEntityUtils()
	then
 		System.out.println("SET_PRI_STATUS_AS_PROGRESS: Rule fired" );

		/* check if the intern already has an application sitting in PROGRESS bucket */
		SearchEntity searchBE = VertxUtils.getObject(serviceToken.getRealm(), "", "SBE_APPLICATIONS_INPROGRESS",SearchEntity.class, serviceToken.getToken());
		if(searchBE != null){
			String internCode = newApplication.getValue("PRI_INTERN_CODE",null);
			System.out.println("internCode :: "+internCode);

			if(internCode != null){
				searchBE.addFilter("PRI_INTERN_CODE", SearchEntity.StringFilter.EQUAL, internCode);
				try {
					BaseEntity app = null;
					List<BaseEntity> apps = beUtils.getBaseEntitys(searchBE);
					System.out.println("The number of apps is "+(apps ==null?"NULL":apps.size()));

					if ((apps!=null) && (apps.size() > 0)) {
						/* send cmd msg */
						String toastStr = "This intern already has an application sitting in Progress bucket. An intern can start only one internship at a time!";
						VertxUtils.sendCmdMsg(beUtils, "TOAST", "INFO", toastStr);
						return;
					}
				}catch (Exception e) {
					System.out.println("Error in " + drools.getRule().getName() +"\n Exception Details   ::   "+e.toString());
				}
			}
		}else{
			System.out.println("SBE_APPLICATIONS_INPROGRESS is not in cache!");
		}

		System.out.println("Moving the application...");

 		Answer answer = new Answer(userToken.getUserCode(),newApplication.getCode(),"PRI_STATUS","PROGRESS");
 		beUtils.saveAnswer(answer);

		Answer answerStage = new Answer(userToken.getUserCode(),newApplication.getCode(),"PRI_STAGE","PROGRESS");
 		beUtils.saveAnswer(answerStage);

		/* SAVE PRI_PROGRESS */
		String internshipWeek = newApplication.getValue("PRI_ASSOC_DURATION","12");
		if(internshipWeek != null){
			JsonObject appProgress = new JsonObject();
			appProgress.put("completedPercentage",  0.0);
			appProgress.put("steps", Integer.decode(internshipWeek));
			appProgress.put("completedJournals", 0);

			Optional<String> optDaysPerWeek = newApplication.getValue("PRI_DAYS_PER_WEEK");
			Optional<String> optInternshipDuration = newApplication.getValue("PRI_ASSOC_DURATION");

			if (optDaysPerWeek.isPresent() && optInternshipDuration.isPresent()) {
				Integer totalJournals = Integer.decode(optDaysPerWeek.get()) * Integer.decode(optInternshipDuration.get());
				String journalStatus = "0/" + totalJournals.toString();
				appProgress.put("completedJournals",journalStatus);

			}else{
				/* Calculate  PRI_DAYS_PER_WEEK and PRI_ASSOC_DURATION from the LNKs */
				Optional<String> optLnkDaysPerWeek = newApplication.getValue("LNK_DAYS_PER_WEEK");
				Optional<String> optLnkInternshipDuration = newApplication.getValue("LNK_INTERNSHIP_DURATION");

				if (optLnkDaysPerWeek.isPresent() && optLnkInternshipDuration.isPresent()) {
					String lnkDaysPerWeekCode = beUtils.cleanUpAttributeValue(optLnkDaysPerWeek.get());
					BaseEntity lnkDaysPerWeekBe = beUtils.getBaseEntityByCode(lnkDaysPerWeekCode);
					String daysPerWeek=null;
					String internshipDuration=null;

					if(lnkDaysPerWeekBe != null){
						daysPerWeek = lnkDaysPerWeekBe.getValue("PRI_NAME", null);
						if(daysPerWeek != null){
							beUtils.saveAnswer(new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_DAYS_PER_WEEK", daysPerWeek));
						}
					}

					String lnkInternshipDurationCode = beUtils.cleanUpAttributeValue(optLnkInternshipDuration.get());
					BaseEntity lnkInternshipDurationBe = beUtils.getBaseEntityByCode(lnkInternshipDurationCode);
					if(lnkInternshipDurationBe != null){
						internshipDuration = lnkInternshipDurationBe.getValue("PRI_NAME", null);
						if(internshipDuration != null){
							beUtils.saveAnswer(new Answer(userToken.getUserCode(), newApplication.getCode(), "PRI_ASSOC_DURATION", internshipDuration));
						}
					}

					if(daysPerWeek != null && internshipDuration != null){
						Integer totalJournals = Integer.decode(daysPerWeek) * Integer.decode(internshipDuration);
						String journalStatus = "0/" + totalJournals.toString();
						appProgress.put("completedJournals",journalStatus);
					}

				}else{
					/* send cmd msg */
					String toastStr = "Internship duration and Days per week is missing in the application. Please fill them by Editing the application details!";
					VertxUtils.sendCmdMsg(beUtils, "TOAST", "INFO", toastStr);
				}
			}
			beUtils.saveAnswer(new Answer(beUtils.getGennyToken().getUserCode(), newApplication.getCode(), "PRI_PROGRESS", appProgress.toString(), false, true));
		}

		/* Publish updated app */
		BaseEntity appBe = beUtils.getBaseEntityByCode(newApplication.getCode());
		if(appBe != null){
			VertxUtils.sendBaseEntityMsg(beUtils, appBe);
		}

		TableUtils.moveEntity(newApplication.getCode(), "SBE_PLACED_APPLICATIONS", "SBE_INPROGRESS_APPLICATIONS", beUtils);


		/* Save status to the PER */
		String assocIntern = newApplication.getValue("PRI_INTERN_CODE", null);
		System.out.println("assocIntern: " +assocIntern);
		if (assocIntern != null){
			BaseEntity assocInternBe = beUtils.getBaseEntityByCode(assocIntern);
			System.out.println("assocInternBe: " +assocInternBe);

			String internStatus = assocInternBe.getValue("PRI_STATUS", null);
			System.out.println("internStatus: " +internStatus);

			if (internStatus.equals("AVAILABLE") || internStatus.equals("APPLIED") || internStatus.equals("SHORTLISTED") || internStatus.equals("INTERVIEWED") || internStatus.equals("OFFERED") || internStatus.equals("PLACED")){
				Answer answerStatus = new Answer(userToken.getUserCode(), assocInternBe.getCode(), "PRI_STATUS", "PROGRESS");
				beUtils.saveAnswer(answerStatus);
				System.out.println("answerStatus: " +answerStatus);
			}

			String appCode = newApplication.getCode();
        	System.out.println(appCode);

        	String[] strippedAppCode = appCode.split("-");
        	System.out.println(strippedAppCode[0]);

        	String assocAppCode = "PRI_" +strippedAppCode[0];
        	System.out.println(assocAppCode);

        	Answer answerApp = new Answer(userToken.getUserCode(), assocInternBe.getCode(), assocAppCode, appCode);
			beUtils.saveAnswer(answerApp);
			System.out.println("answerApp: " +answerApp);


			Answer answerDisable = new Answer(userToken.getUserCode(), assocInternBe.getCode(), "PRI_DISABLED", true);
			beUtils.saveAnswer(answerDisable);
			System.out.println("answerDisable: " +answerDisable);


		} else {
			System.out.println("$$$ assocIntern PRI_INTERN_CODE was null $$$");
		}

		/* GET INTERN DETAILS */
		String internName = null;
		BaseEntity internBE = beUtils.getBaseEntityFromLNKAttr(newApplication, "PRI_INTERN_CODE");
		if (internBE != null) {
			internName = internBE.getValue("PRI_NAME", null);
		}
		System.out.println("internName = " + internName);

		/* GET HC DETAILS */
		String internshipTitle = null;
		String hostCompanyName = null;
		BaseEntity internshipBE = beUtils.getBaseEntityFromLNKAttr(newApplication, "LNK_INTERNSHIP");
		if (internshipBE != null) {
			internshipTitle = internshipBE.getValue("PRI_NAME", null);

			BaseEntity hostCompanyBE = beUtils.getBaseEntityFromLNKAttr(internshipBE, "LNK_HOST_COMPANY");
			if (hostCompanyBE != null) {
				hostCompanyName = hostCompanyBE.getValue("PRI_NAME", null);
			}
		}
		System.out.println("internshipTitle = " + internshipTitle);
		System.out.println("hostCompanyName = " + hostCompanyName);


		String endPoint = GennySettings.projectUrl + "/v7/notes";
		/*String endPoint = "https://internmatch-cyrus.gada.io/v7/notes";*/

		String tag = "ni";

		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), tag, newApplication.getCode(), internName + ", began the internship " + internshipTitle + " at " + hostCompanyName, serviceToken.getToken());

		System.out.println("I just posted the note");
		System.out.println("Note endPoint: " +endPoint);
		System.out.println("Note userToken.getUserCode(): " +userToken.getUserCode());

		/* Re generate cached applications */
		SearchUtils.regenerateCaches(beUtils, newApplication);


		retract(newApplication)
		retract(bucketCode)
		retract(controlSignalCode)

end
