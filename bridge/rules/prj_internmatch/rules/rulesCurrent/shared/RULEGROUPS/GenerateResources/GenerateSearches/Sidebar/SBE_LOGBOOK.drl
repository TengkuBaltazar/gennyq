package life.genny.rules;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.models.GennyToken;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwandautils.GennySettings;

rule "SBE_LOGBOOK"
	ruleflow-group 'GenerateSearches'
	no-loop true
	when
		not SearchEntity (code == "SBE_LOGBOOK")
		serviceToken : GennyToken( code == "PER_SERVICE")
	then
		System.out.println("   Generate "+drools.getRule().getName() );
		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken);

		SearchEntity searchBE = new SearchEntity(drools.getRule().getName(), "Logbook")
			.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "JNL_%")
			.addSort("PRI_JOURNAL_DATE", "Date", SearchEntity.Sort.ASC)
			.addColumn("PRI_JOURNAL_DATE", "Date")
			.addColumn("PRI_JOURNAL_HOURS", "Hours")
			.addColumn("PRI_STATUS", "Status")
			.addColumn("PRI_JOURNAL_TASKS", "Roles and Responsibilities")
			.addColumn("PRI_JOURNAL_LEARNING_OUTCOMES", "Learning Outcomes")
			.addColumn("PRI_HAS_DOWNLOAD_LINK", " ")
			.setDisplayMode("journal")

			.setPageStart(0)
			.setPageSize(1000);

		searchBE.setRealm(serviceToken.getRealm());
		insert(searchBE);
		VertxUtils.putObject(serviceToken.getRealm(), "", searchBE.getCode(), searchBE, serviceToken.getToken());
end
