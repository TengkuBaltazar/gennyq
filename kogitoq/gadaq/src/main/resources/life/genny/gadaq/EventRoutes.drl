package life.genny.gadaq;

import life.genny.qwandaq.message.QEventMessage;
import life.genny.qwandaq.models.UserToken;
import life.genny.qwandaq.entity.BaseEntity;
import life.genny.qwandaq.utils.CacheUtils;
import life.genny.qwandaq.utils.KafkaUtils;
import life.genny.qwandaq.utils.BaseEntityUtils;
import life.genny.kogito.common.utils.KogitoUtils;
import org.apache.commons.lang3.StringUtils;

ruleflow-group 'EventRoutes'

rule RouteAuthInit 
when
	msg: QEventMessage( data.code == "AUTH_INIT" )
	userToken : UserToken()
	kogitoUtils : KogitoUtils()
then
	kogitoUtils.triggerWorkflow("authInit", "eventMessage", msg);
end

rule RouteSubmit 
when
	msg: QEventMessage( data.code == "QUE_SUBMIT" )
	kogitoUtils : KogitoUtils()
then
	String processId = msg.getData().getProcessId();
	kogitoUtils.sendSignal("processQuestions", processId, "submit", "");
	retract(msg);
end

rule RouteCancel 
when
	msg: QEventMessage( data.code == "QUE_CANCEL" )
	kogitoUtils : KogitoUtils()
then
	String processId = msg.getData().getProcessId();
	kogitoUtils.sendSignal("processQuestions", processId, "cancel", "");
	retract(msg);
end

rule RouteReset 
when
	msg: QEventMessage( data.code == "QUE_RESET" )
	kogitoUtils : KogitoUtils()
then
	String processId = msg.getData().getProcessId();
	kogitoUtils.sendSignal("processQuestions", processId, "reset", "");
	retract(msg);
end

rule RouteAddItem 
when
	msg: QEventMessage( data.code matches "QUE_ADD_.*" )
	kogitoUtils : KogitoUtils()
then
	String code = StringUtils.removeStart(msg.getData().getCode(), "QUE_ADD_");
	kogitoUtils.triggerWorkflow("createBaseEntity", "definitionCode", "DEF_"+code);
	retract(msg);
end

/**
 * If no route exists within gadaq, the message should be
 * sent to the project specific service.
 */
rule ForwardEvent
salience 0
when
	msg: QEventMessage()
then
	System.out.println("Forwarding Event Message...");
	KafkaUtils.writeMsg("genny_events", msg);
	retract(msg);
end

