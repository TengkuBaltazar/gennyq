package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.ShleemyUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import org.apache.commons.lang3.ObjectUtils;
import life.genny.utils.validation.MessageValidator;
import life.genny.message.QMessageGennyMSG;
import java.time.LocalDateTime;

rule "REMIND_HCR_PROCEED_SHORTLISTED_96HR"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
   		$message : QEventMessage(data.code == "SCHEDULE_HCR_PROCEED_SHORTLISTED_96HR")
   		userToken : GennyToken  ()
		serviceToken : GennyToken (code == "PER_SERVICE" )

    then
        System.out.println(drools.getRule().getName() + " : Rule fired" );
        System.out.println(drools.getRule().getName() + " : Rule fired at "+ LocalDateTime.now());

        BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

        String targetCode = $message.getData().getTargetCode();
        System.out.println("targetCode: " +targetCode);

        String user = userToken.getUserCode();
        System.out.println("user: " +user);

        BaseEntity applicationBe = beUtils.getBaseEntityByCode(targetCode);
        System.out.println("applicationBe: "+ applicationBe);

        if (applicationBe != null) {
            String appStatus = applicationBe.getValue("PRI_STATUS", null);
            System.out.println("appStatus = " + appStatus);

            if (appStatus != null && appStatus.equals("SHORTLISTED")) {
                /* CHANGE CARD COLOUR */
                Answer answerColour = new Answer(serviceToken.getUserCode(), applicationBe.getCode(), "PRI_STATUS_COLOR", "error");
                beUtils.saveAnswer(answerColour);
                System.out.println("Answer done" +answerColour);

                VertxUtils.sendToFrontEnd(userToken, answerColour);
                System.out.println("sendToFrontEnd done");

                /* PUBLISH CARD COLOUR */
                /* BaseEntity targetBE  = beUtils.getBaseEntityByCode(targetCode); */

                QDataBaseEntityMessage msg = new QDataBaseEntityMessage(applicationBe);
                msg.setToken(userToken.getToken());

                String[] rxList = new String[2];
                rxList[0] = "SUPERUSER";
                rxList[1] = "AGENT";
                msg.setRecipientCodeArray(rxList);

                VertxUtils.writeMsg("project", JsonUtils.toJson(msg));
                System.out.println("writeMsg done");


                /* Fetching internship from application */
                BaseEntity internshipBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERNSHIP");
                System.out.println("internshipBe: "+ internshipBe);

                /* Fetching intern from application */
                BaseEntity internBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "PRI_INTERN_CODE");
                System.out.println("internBe: "+ internBe);

                /* Fetching host company representative from application */
                BaseEntity hcrBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERN_SUPERVISOR");
                System.out.println("hcrBe: "+ hcrBe);

                BaseEntity hcBe = null;
                if(hcrBe != null){
                    /* Fetching host company from host company */
                    hcBe = beUtils.getBaseEntityFromLNKAttr(hcrBe, "LNK_HOST_COMPANY");
                    System.out.println("hcBe: "+ hcBe);
                }

                /* Fetching agent from application */
                BaseEntity agentBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_AGENT");
                System.out.println("agentBe: "+ agentBe);
                String url = "";
                if(ObjectUtils.allNotNull(internBe,internshipBe,hcrBe,hcBe,agentBe)){
                    Boolean isEmailBlank = MessageValidator.isEmailBlank(hcrBe);
                    System.out.println("isEmailBlank: "+ isEmailBlank);

                    Boolean sendEmail = hcrBe.getValue("PRI_EMAIL_FLAG", false);
                    System.out.println("sendEmail = " + sendEmail);

                    if(!isEmailBlank && sendEmail){
                        /* Creating url for the shortlisted application */
                        url = new StringBuilder()
                           .append("SBE_SHORTLISTED_APPLICATIONS_")
                           .append(userToken.getJTI().toUpperCase())
                           .append("/")
                           .append("ACT_PRI_EVENT_VIEW_APPLICATION")
                           .append("/")
                           .append(applicationBe.getCode())
                           .toString();
                        System.out.println("url: " + url);

                        /* Email is sent to the host company representative */
                        /* Building sendgrid msg and sending it */
                        QMessageGennyMSG hcrSendgridMsg = new QMessageGennyMSG.Builder("MSG_IM_HC_REP_OFFER_INTERVIEW_REMINDER_96HRS")
                           .addRecipient(hcrBe)
                           .addContext("INTERNSHIP", internshipBe)
                           .addContext("HC", hcBe)
                           .addContext("INTERN", internBe)
                           .addContext("URL:ENCODE", url)
                           .setUtils(beUtils)
                           .send();

                        System.out.println("Sendgrid msg: "+ JsonUtils.toJson(hcrSendgridMsg));
                        System.out.println("Sendgrid email sent to host company representative!!");
                    }
                    /* Preparing Data to send email to Agent */
                    url = new StringBuilder()
                        .append("SBE_INTERNS_")
                        .append(userToken.getJTI().toUpperCase())
                        .append("/")
                        .append("ACT_PRI_EVENT_VIEW")
                        .append("/")
                        .append(applicationBe.getCode())
                        .toString();

                    System.out.println("url: " + url);

                    /* Email is sent to the agent */
                    /* Building sendgrid msg and sending it */
                    QMessageGennyMSG agentSendgridMsg = new QMessageGennyMSG.Builder("MSG_IM_AGENT_HC_NOT_OFFERED_INTERVIEW")
                                           .addRecipient(agentBe)
                                           .addContext("INTERNSHIP", internshipBe)
                                           .addContext("HC", hcBe)
                                           .addContext("INTERN", internBe)
                                           .addContext("URL:ENCODE", url)
                                           .setUtils(beUtils)
                                           .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(agentSendgridMsg));
                    System.out.println("Sendgrid email sent to agent!!");

                    Boolean isHcrMobileBlank = MessageValidator.isMobileBlank(hcrBe);
                    System.out.println("isHcrMobileBlank: "+ isHcrMobileBlank);

                    /* send sms only if it's a production environment */
                    if (!isHcrMobileBlank && !GennySettings.projectUrl.contains("dev")) {
                        /* Building sms msg and sending it */
                        QMessageGennyMSG smsMsg =  new QMessageGennyMSG.Builder("MSG_IM_SMS_HC_REP_OFFER_INTERVIEW_REMINDER_96HRS")
                           .addRecipient(hcrBe)
                           .setUtils(beUtils)
                           .send();
                        System.out.println("Sms msg: "+ JsonUtils.toJson(smsMsg));
                        System.out.println("Sms sent to hcr!!");
                    }
               }else{
                   System.out.println("Required Object is NULL!!");
               }
            } else {
                /* DELETE SCHEDULES */
                ShleemyUtils.deleteSchedule(serviceToken, applicationBe.getCode()+"_HCR_PROCEED_SHORTLISTED_96HR");
            }
        } else {
            System.out.println("applicationBe is NULL");
        }

	retract($message)
end
