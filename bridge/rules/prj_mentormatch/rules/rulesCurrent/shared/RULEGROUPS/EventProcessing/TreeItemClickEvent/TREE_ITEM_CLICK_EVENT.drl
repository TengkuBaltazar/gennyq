package life.genny.rules;

import org.apache.commons.lang3.StringUtils;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import io.vertx.core.json.JsonObject;
import java.util.Map;
import java.util.HashMap;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import com.google.gson.reflect.TypeToken;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.VertxUtils;
import life.genny.utils.TableUtils;
import life.genny.models.TableData;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Ask;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.utils.OutputParam;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;

import java.util.List;
import java.util.ArrayList;

import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import life.genny.utils.SearchCallable;
import life.genny.utils.TableFrameCallable;
import life.genny.utils.CacheSearchUtils;

rule "TREE_ITEM_CLICK_EVENT"
    ruleflow-group 'EventProcessing'
		salience 2
    no-loop
    when
			message : QEventMessage( data.code matches "SCH_ACT_PRI_EVENT_QUE_TREE_ITEM_.*")
			userToken : GennyToken (code != "PER_SERVICE" )
			serviceToken : GennyToken( code == "PER_SERVICE")
			output : OutputParam( )
			ruleDetails : RuleDetails()
			beUtils : BaseEntityUtils()
    then
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processings : " + message );

			Boolean cache = true;

			String code = message.getData().getCode();
			
			if(code.startsWith("SCH_ACT_PRI_EVENT_QUE_TREE_ITEM_")){
				code = StringUtils.removeStart(code,"SCH_ACT_PRI_EVENT_");
			}

			code = StringUtils.removeStart(code, "QUE_TREE_ITEM_");
			code = StringUtils.removeStart(code, "QUE_TABLE_");
			code = StringUtils.removeEnd(code, "_GRP");
			System.out.println("CODE   ::   " + code);

			String searchCode = "SBE_" + code;
			System.out.println("searchCode   ::   " + searchCode);

			TableUtils tableUtils = new TableUtils(beUtils);
			SearchEntity searchBE = tableUtils.getSessionSearch(searchCode);
			if(searchBE != null) {
				/* Reset page to start */
				Answer pageAnswer = new Answer(beUtils.getGennyToken().getUserCode(), searchBE.getCode(), "SCH_PAGE_START", "0");
				Answer pageNumberAnswer = new Answer(beUtils.getGennyToken().getUserCode(), searchBE.getCode(), "PRI_INDEX", "1");
				
				searchBE = beUtils.updateBaseEntity(searchBE, pageAnswer, SearchEntity.class);
				searchBE = beUtils.updateBaseEntity(searchBE, pageNumberAnswer, SearchEntity.class);
				
				VertxUtils.putObject(beUtils.getGennyToken().getRealm(), "", searchBE.getCode(), searchBE,
				beUtils.getGennyToken().getToken());

				long totalTime = TableUtils.searchTable(beUtils,searchBE, cache);
				System.out.println("total took " + (totalTime) + " ms"); 

				/* Send out the Filter question group */
				TableUtils.sendFilterQuestions(beUtils, searchBE.getCode());
				
			}else{
				System.out.println("searchBE is null"); 

			}

			retract(message);
			output.setTypeOfResult("NONE");
			output.setResultCode("NONE");  /* dont display anything new */
		end
