package life.genny.rules;

import life.genny.models.GennyToken;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.SearchUtils;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.SmsHelper;
import java.util.Arrays;
import life.genny.message.QMessageGennyMSG;
import life.genny.qwanda.message.QBaseMSGMessageType;
import life.genny.qwandautils.MessageUtils;
import life.genny.utils.ShleemyUtils;
import life.genny.qwandautils.JsonUtils;
import life.genny.utils.validation.MessageValidator;
import life.genny.qwandautils.QwandaUtils;

rule "SET_PRI_STATUS_AS_SHORTLISTED"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		newApplication : BaseEntity(code matches "APP_\\S+")
		bucketCode : String(bucketCode.equals("APPLIED"))
		controlSignalCode : String(controlSignalCode.equals("SHORTLISTED"))
		beUtils : BaseEntityUtils()

    then
 		System.out.println(drools.getRule().getName() + " : Rule fired!! - newApplication = " + newApplication);
		newApplication = beUtils.getBaseEntityByCode(newApplication.getCode());

 		Answer answer = new Answer(userToken.getUserCode(),newApplication.getCode(),"PRI_STATUS","SHORTLISTED");
		answer.setChangeEvent(true);
 		beUtils.saveAnswer(answer);

		Answer answerStage = new Answer(userToken.getUserCode(),newApplication.getCode(),"PRI_STAGE","SHORTLISTED");
		answerStage.setChangeEvent(true);
 		beUtils.saveAnswer(answerStage);

		/* Save status to the PER */
		BaseEntity intern = beUtils.getBaseEntityFromLNKAttr(newApplication, "PRI_INTERN_CODE");
		BaseEntity agent = null;
		System.out.println("intern = " + intern);
		if (intern != null){
			String internStatus = intern.getValue("PRI_STATUS", null);
			System.out.println("internStatus: " +internStatus);
			if (internStatus.equals("AVAILABLE") || internStatus.equals("APPLIED")){
				Answer answerStatus = new Answer(userToken.getUserCode(), intern.getCode(), "PRI_STATUS", "SHORTLISTED");
				beUtils.saveAnswer(answerStatus);
			}

			agent = beUtils.getBaseEntityFromLNKAttr(intern, "LNK_AGENT");
		} else {
			System.out.println("intern BE is NULL");
		}

		BaseEntity hostCompany = null;
		BaseEntity hostCompanyRep = null;
		Boolean sendEmail = false;

		BaseEntity internship = beUtils.getBaseEntityFromLNKAttr(newApplication, "LNK_INTERNSHIP");

		if (internship != null) {
			hostCompany = beUtils.getBaseEntityFromLNKAttr(internship, "LNK_HOST_COMPANY");
			hostCompanyRep = beUtils.getBaseEntityFromLNKAttr(internship, "LNK_HOST_COMPANY_REP");
			/* BaseEntity supervisorBE = beUtils.getBaseEntityFromLNKAttr(internshipBE, "LNK_INTERN_SUPERVISOR"); */
		}

		TableUtils.moveEntity(newApplication.getCode(), "SBE_APPLIED_APPLICATIONS", "SBE_SHORTLISTED_APPLICATIONS", beUtils);

		System.out.println("#### Scheduling Shleemy Events ####");
		LocalDateTime now = LocalDateTime.now(ZoneOffset.UTC);

		String scheduleMsgCode48HR = newApplication.getCode() + "_HCR_PROCEED_SHORTLISTED_48HR";
		ShleemyUtils.scheduleMessage(userToken, "SCHEDULE_HCR_PROCEED_SHORTLISTED_48HR", scheduleMsgCode48HR, now.plusHours(48), newApplication.getCode());

		String scheduleMsgCode96HR = newApplication.getCode() + "_HCR_PROCEED_SHORTLISTED_96HR";
		ShleemyUtils.scheduleMessage(userToken, "SCHEDULE_HCR_PROCEED_SHORTLISTED_96HR", scheduleMsgCode96HR, now.plusHours(96), newApplication.getCode());

        String internUrl = new StringBuilder()
            .append("SBE_SHORTLISTED_APPLICATIONS_")
            .append(userToken.getJTI().toUpperCase())
            .append("/")
            .append("ACT_PRI_EVENT_VIEW_APPLICATION")
            .append("/")
            .append(newApplication.getCode())
            .toString();

		/* Init Sendgrid Msg */
		QMessageGennyMSG sendGridInternMsg = new QMessageGennyMSG.Builder("MSG_INT4_SHORTLISTED")
            .setUtils(beUtils)
            .addRecipient(intern)
            .addContext("HC", hostCompany)
            .addContext("INTERNSHIP", internship)
            .addContext("INTERN", intern)
            .addContext("URL:ENCODE", internUrl)
            .addContext("BCC", "PRJ_INTERNMATCH")
            .send();

        System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendGridInternMsg));
        System.out.println("Sendgrid email sent to intern!!");

        Boolean isInternMobileBlank = MessageValidator.isMobileBlank(intern);
        System.out.println("isInternMobileBlank: "+ isInternMobileBlank);

		/* Send SMS to Intern */
        if (!isInternMobileBlank && !GennySettings.projectUrl.contains("dev")) {
            /* Building sms msg and sending it */
            QMessageGennyMSG internSmsMsg =  new QMessageGennyMSG.Builder("MSG_INT_SMS_SHORTLISTED")
                .addRecipient(intern)
                .setUtils(beUtils)
                .send();
            System.out.println("Sms msg: "+ JsonUtils.toJson(internSmsMsg));
            System.out.println("Sms sent to intern!!");
        }

        String hcrUrl = new StringBuilder()
            .append("SBE_SHORTLISTED_APPLICATIONS_")
            .append(userToken.getJTI().toUpperCase())
            .append("/")
            .append("ACT_PRI_EVENT_VIEW")
            .append("/")
            .append(newApplication.getCode())
            .toString();

		/* Init Sendgrid Msg */
		if (hostCompanyRep != null) {
			sendEmail = hostCompanyRep.getValue("PRI_EMAIL_FLAG", false);
			if (sendEmail) {
                QMessageGennyMSG sendGridHcrMsg = new QMessageGennyMSG.Builder("MSG_HCR3_SHORTLISTED")
                    .setUtils(beUtils)
                    .addRecipient(hostCompanyRep)
                    .addContext("HC", hostCompany)
                    .addContext("INTERNSHIP", internship)
                    .addContext("INTERN", intern)
                    .addContext("URL:ENCODE", hcrUrl)
                    .addContext("BCC", "PRJ_INTERNMATCH")
                    .send();
                System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendGridHcrMsg));
                System.out.println("Sendgrid email sent to hcr!!");
			}
		}

        String agentUrl = new StringBuilder()
            .append("SBE_SHORTLISTED_APPLICATIONS_")
            .append(userToken.getJTI().toUpperCase())
            .append("/")
            .append("ACT_PRI_EVENT_VIEW")
            .append("/")
            .append(newApplication.getCode())
            .toString();

        if(agent != null){
            QMessageGennyMSG sendGridAgentMsg = new QMessageGennyMSG.Builder("MSG_AGT4_SHORTLISTED")
                .setUtils(beUtils)
                .addRecipient(agent)
                .addContext("HC", hostCompany)
                .addContext("INTERNSHIP", internship)
                .addContext("INTERN", intern)
                .addContext("URL:ENCODE", agentUrl)
                .addContext("BCC", "PRJ_INTERNMATCH")
                .send();

            System.out.println("Sendgrid msg: "+ JsonUtils.toJson(sendGridAgentMsg));
            System.out.println("Sendgrid email sent to agent!!");
        }

		String endPoint = GennySettings.projectUrl + "/v7/notes";
		QwandaUtils.apiPostNote(endPoint, userToken.getUserCode(), "ni", newApplication.getCode(), intern.getCode() + ", shortlisted for " + hostCompany.getCode(), serviceToken.getToken());

		/* Re generate cached applications */
		SearchUtils.regenerateCaches(beUtils, newApplication);

		retract(newApplication)
		retract(bucketCode)
		retract(controlSignalCode)

		System.out.println("End of " + drools.getRule().getName() + " :Rule for - newApplication = " + newApplication);
end
