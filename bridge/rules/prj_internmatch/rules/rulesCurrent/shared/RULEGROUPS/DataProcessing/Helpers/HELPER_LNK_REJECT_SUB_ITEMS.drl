package life.genny.rules;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import life.genny.utils.TaskUtils;
import java.util.List;
import java.util.ArrayList;
import life.genny.utils.QuestionUtils;

rule "HELPER_LNK_REJECT_SUB_ITEMS"
	ruleflow-group 'DataProcessing'
	salience 500
	no-loop true
	when
		userToken : GennyToken (code != "PER_SERVICE" )
		serviceToken : GennyToken (code == "PER_SERVICE" )
		answer : Answer( attributeCode == "LNK_REASON_FOR_REJECTION" && ( targetCode.startsWith("APP_") ) )
		output : OutputParam()
		beUtils : BaseEntityUtils()

	then
		System.out.println(drools.getRule().getName()+": Rule fired");

		Boolean hideSubItems = null;
 		
		/* Get Target User BE */
 		String targetCode = answer.getTargetCode();
 		System.out.println("targetCode = " + targetCode); 
 		String value = answer.getValue();
 		System.out.println("value = " + value); 
 		value = beUtils.cleanUpAttributeValue(value);
 		System.out.println("clean value = " + value); 

		if (value.equals("SEL_REJECT_ITEM_1") || value.equals("SEL_REJECT_ITEM_3") || value.equals("SEL_REJECT_ITEM_6")) {
			String numStr = value.split("SEL_REJECT_ITEM_")[1];
			/* dropdown search here For companyRep */
			DropdownUtils dropdown = new DropdownUtils(serviceToken);
			dropdown.setNewSearch("Sub Reason For Rejection", "Fetch RFR Sub Items")
												.addFilter("PRI_CODE", SearchEntity.StringFilter.LIKE, "SEL_REJECT_SUB_ITEM_"+numStr+"_%")
												.setPageStart(0)
												.setPageSize(1000);

			/* Send the dropdown options */
			dropdown.sendSearchResults("GRP_SUB_REASON_FOR_REJECTION", "LNK_ITEM", "ITEM", true, false, userToken, false);

			hideSubItems = false;
		} else {
			hideSubItems = true;
		}

		QDataAskMessage askMsg = QuestionUtils.getAsks(userToken.getUserCode(), targetCode, "QUE_REASON_FOR_REJECTION_GRP", userToken.getToken());

		if (askMsg != null) {
			/* SET REPLACE TRUE */
			for (Ask ask : askMsg.getItems()[0].getChildAsks()) {
				if (ask.getQuestionCode().equals("QUE_SUB_REASON_FOR_REJECTION")) {
					/* Disable and send the ask */
					if (hideSubItems != null) {
						System.out.println("Disabling Sub section dropdown");
						ask.setHidden(hideSubItems);

						QDataAskMessage msg = new QDataAskMessage(ask);
						msg.setToken(userToken.getToken());
						msg.setReplace(true);
						String sendingMsg = JsonUtils.toJson(msg);
						VertxUtils.writeMsg("webcmds", sendingMsg);
					}
				} else if (ask.getQuestionCode().equals("QUE_SUBMIT")) {

					TaskUtils.enableTaskQuestion(ask, true, userToken);

				}
			}
		} else {
			System.out.println("Could not fetch ask from cache: QUE_QA_HOST_CPY_REP_GRP"); 
		}


		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");
end
