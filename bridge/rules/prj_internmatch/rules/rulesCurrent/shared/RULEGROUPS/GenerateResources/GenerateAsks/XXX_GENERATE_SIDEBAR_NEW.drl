package life.genny.rules;


import life.genny.qwanda.message.QCmdMessage;
import life.genny.qwanda.message.QBulkMessage;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventMessage;
import life.genny.rules.QRules;
import life.genny.qwandautils.JsonUtils;
import org.apache.logging.log4j.Logger;


import java.util.List;
import java.util.ArrayList;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.utils.VertxUtils;
import life.genny.utils.BaseEntityUtils;
import life.genny.models.GennyToken;
import org.kie.api.runtime.process.WorkflowProcessInstance;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwandautils.GennySettings;
import life.genny.qwanda.datatype.DataType;
import life.genny.qwanda.attribute.Attribute;
import life.genny.qwanda.Question;
import life.genny.qwanda.Ask;

rule "GENERATE_SIDEBAR"
	ruleflow-group 'GenerateAsks'
	no-loop true
	when
		not SearchEntity (code == "GENERATE_SIDEBAR")
        serviceToken : GennyToken( code == "PER_SERVICE")
		then
     	System.out.println("   Generate "+drools.getRule().getName() );
     	BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken);

			String sourceCode = "PER_SERVICE";
			String targetCode = "PER_SERVICE";
			
			Attribute questionAttribute = new Attribute("QQQ_QUESTION_GROUP", "link", new DataType(String.class));
			Attribute eventAttribute = new Attribute("PRI_EVENT", "link", new DataType(String.class));

			/* sidebar group */
			Question sidebarQues = new Question("QUE_PROJECT_SIDEBAR_GRP", "Sidebar", questionAttribute, true);
			Ask sidebarAsk = new Ask(sidebarQues, sourceCode, targetCode);
			
			/* dashboard */
			Question dashboardQues = new Question("QUE_DASHBOARD_VIEW", "Dashboard", eventAttribute, true);
			Ask dashboardAsk = new Ask(dashboardQues, sourceCode, targetCode);
			
			/* process view */
			Question processViewQues = new Question("QUE_TAB_BUCKET_VIEW", "Process View", eventAttribute, true);
			Ask processViewAsk = new Ask(processViewQues, sourceCode, targetCode);

			/* internships */
			Question internshipsQues = new Question("QUE_TREE_ITEM_INTERNSHIPS", "Internships", questionAttribute, true);
			Ask internshipsAsk = new Ask(internshipsQues, sourceCode, targetCode);

			/* host-companies */
			Question hostCompaniesQues = new Question("QUE_TREE_ITEM_HOST_COMPANIES", "Host Companies", questionAttribute, true);
			Ask hostCompaniesAsk = new Ask(hostCompaniesQues, sourceCode, targetCode);
			
			/* edu-providers */
			Question eduProvidersQues = new Question("QUE_TREE_ITEM_EDU_PROVIDERS", "Edu Providers", questionAttribute, true);
			Ask eduProvidersAsk = new Ask(eduProvidersQues, sourceCode, targetCode);

			/* applications */
			Question applicationsQues = new Question("QUE_TREE_ITEM_APPLICATIONS_APPLIED", "My Applications", questionAttribute, true);
			Ask applicationsAsk = new Ask(applicationsQues, sourceCode, targetCode);

			/* my company */
			Question myCompanyQues = new Question("QUE_HOST_COMPANY_VIEW", "My Company", eventAttribute, true);
			Ask myCompanyAsk = new Ask(myCompanyQues, sourceCode, targetCode);

			/* contacts */
			Question contactsQues = new Question("QUE_TREE_ITEM_CONTACTS_GRP", "Contacts", questionAttribute, true);
			Ask contactsAsk = new Ask(contactsQues, sourceCode, targetCode);

			/* logbook */
			Question logbookQues = new Question("QUE_TREE_ITEM_LOGBOOK_GRP", "LogBook", questionAttribute, true);
			Ask logbookAsk = new Ask(logbookQues, sourceCode, targetCode);

				Question internsQues = new Question("QUE_TREE_ITEM_INTERNS", "Interns", eventAttribute, true);
				Question hcrQues = new Question("QUE_TREE_ITEM_HCRS", "Host Company Reps", eventAttribute, true);
				Question eduProRepQues = new Question("QUE_TREE_ITEM_EPRS", "Edu Provider Reps", eventAttribute, true);
				Question agentsQues = new Question("QUE_TREE_ITEM_AGENTS", "Agents", eventAttribute, true);
				Question referrersQues = new Question("QUE_TREE_ITEM_REFERRERS", "Referrers", eventAttribute, true);
				
				Ask internsAsk = new Ask(internsQues, sourceCode, targetCode);
				Ask hcrAsk = new Ask(hcrQues, sourceCode, targetCode);
				Ask eduProRepAsk = new Ask(eduProRepQues, sourceCode, targetCode);
				Ask agentsAsk = new Ask(agentsQues, sourceCode, targetCode);
				Ask referrersAsk = new Ask(referrersQues, sourceCode, targetCode);

				Ask[] contactsChildAsks = { internsAsk, hcrAsk, eduProRepAsk, agentsAsk };
				contactsAsk.setChildAsks(contactsChildAsks);

			Ask[] items = { dashboardAsk, processViewAsk, contactsAsk, internshipsAsk, hostCompaniesAsk, eduProvidersAsk };

			sidebarAsk.setChildAsks(items);
			VertxUtils.putObject(serviceToken.getRealm(), "", "SIDEBAR", sidebarAsk, serviceToken.getToken());

end
