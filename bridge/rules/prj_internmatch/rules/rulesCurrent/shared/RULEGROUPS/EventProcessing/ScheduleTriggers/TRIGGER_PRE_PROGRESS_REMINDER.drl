package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;
import java.time.LocalTime;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.message.QMessageGennyMSG;
import org.apache.commons.lang3.ObjectUtils;
import life.genny.utils.validation.MessageValidator;
import java.time.LocalDateTime;

rule "TRIGGER_PRE_PROGRESS_REMINDER"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
   		$message : QEventMessage(data.code == "PRE_PROGRESS_REMINDER")
   		userToken : GennyToken  ()
		serviceToken : GennyToken (code == "PER_SERVICE" )

    then
 		System.out.println(drools.getRule().getName() + " : Rule fired" );
        System.out.println(drools.getRule().getName() + " : Rule fired at "+ LocalDateTime.now());

 		BaseEntityUtils beUtils = new BaseEntityUtils(serviceToken, userToken);

		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode: " +targetCode);

		BaseEntity applicationBe = beUtils.getBaseEntityByCode(targetCode);
        System.out.println("applicationBe: "+ applicationBe);

		if(applicationBe != null){
            /* Fetching host company representative from application */
            BaseEntity hcrBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERN_SUPERVISOR");
            System.out.println("hcrBe: "+ hcrBe);

            /* Fetching agent from application */
            BaseEntity agentBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_AGENT");
            System.out.println("agentBe: "+ agentBe);

            /* Fetching intern from application */
            BaseEntity internBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERN");
            System.out.println("internBe: "+ internBe);

            /* Fetching internship duration from intern */
            BaseEntity internshipDurationBe = null;
            if(internBe != null){
                internshipDurationBe = beUtils.getBaseEntityFromLNKAttr(internBe, "LNK_INTERNSHIP_DURATION");
                System.out.println("internshipDurationBe: "+ internshipDurationBe);
            }

            /* Fetching days per week from intern */
            BaseEntity internshipDaysPerWeekBe = null;
            if(internBe != null){
                internshipDaysPerWeekBe = beUtils.getBaseEntityFromLNKAttr(internBe, "LNK_DAYS_PER_WEEK");
                System.out.println("internshipDaysPerWeekBe: "+ internshipDaysPerWeekBe);
            }

            /* Fetching internship from application */
            BaseEntity internshipBe = beUtils.getBaseEntityFromLNKAttr(applicationBe, "LNK_INTERNSHIP");
            System.out.println("internshipBe: "+ internshipBe);

            BaseEntity hcBe = null;
            if(internshipBe != null){
                /* Fetching host company from internship */
                hcBe = beUtils.getBaseEntityFromLNKAttr(internshipBe, "LNK_HOST_COMPANY");
                System.out.println("hcBe: "+ hcBe);
            }

            if(ObjectUtils.allNotNull(hcrBe, agentBe, internBe, internshipBe, hcBe, internshipDurationBe, internshipDaysPerWeekBe)){

                Boolean isInternEmailBlank = MessageValidator.isEmailBlank(internBe);
                System.out.println("isInternEmailBlank: "+ isInternEmailBlank);

                if(!isInternEmailBlank){
                    /* Building sendgrid msg and sending it */
                    /* Sending email to intern */
                    QMessageGennyMSG internSendgridMsg = new QMessageGennyMSG.Builder("MSG_IM_INTERN_INTERNSHIP_REMINDER")
                        .addRecipient(internBe)
                        .addContext("APPLICATION", applicationBe)
                        .addContext("DATEFORMAT","dd-MMM-yy")
                        .setUtils(beUtils)
                        .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(internSendgridMsg));
                    System.out.println("Sendgrid email sent to intern!!");
                }

                Boolean sendToSupervisor = hcrBe.getValue("PRI_EMAIL_FLAG", false);
                Boolean isHcrEmailBlank = MessageValidator.isEmailBlank(hcrBe);
                System.out.println("isHcrEmailBlank: "+ isHcrEmailBlank);
                if(!isHcrEmailBlank && sendToSupervisor){
                    /* Building sendgrid msg and sending it */
                    /* Sending host company representative to intern */
                    QMessageGennyMSG hcrSendgridMsg = new QMessageGennyMSG.Builder("MSG_IM_HC_INTERNSHIP_REMINDER")
                        .addRecipient(hcrBe)
                        .addContext("APPLICATION", applicationBe)
                        .addContext("DATEFORMAT","dd-MMM-yy")
                        .setUtils(beUtils)
                        .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(hcrSendgridMsg));
                    System.out.println("Sendgrid email sent to host company representative (supervisor)!!");
                }

                Boolean isAgentEmailBlank = MessageValidator.isEmailBlank(hcrBe);
                System.out.println("isAgentEmailBlank: "+ isAgentEmailBlank);

                if(!isAgentEmailBlank){
                    /* Building sendgrid msg and sending it */
                    /* Sending email to agent */
                    QMessageGennyMSG agentSendGridMsg = new QMessageGennyMSG.Builder("MSG_IM_AGENT_INTERNSHIP_REMINDER")
                        .addRecipient(agentBe)
                        .addContext("APPLICATION", applicationBe)
                        .addContext("DATEFORMAT","dd-MMM-yy")
                        .setUtils(beUtils)
                        .send();

                    System.out.println("Sendgrid msg: "+ JsonUtils.toJson(agentSendGridMsg));
                    System.out.println("Sendgrid email sent to agent!!");
                }
            }else{
                System.out.println("Required Object is NULL!!");
            }
		}else{
            System.out.println("Application is NULL!!");
		}
	retract($message)
end
