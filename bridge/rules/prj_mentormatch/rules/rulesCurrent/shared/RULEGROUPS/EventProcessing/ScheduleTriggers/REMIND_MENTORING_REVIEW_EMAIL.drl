package life.genny.rules;

import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QScheduleMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.ShleemyUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.notifications.EmailHelper;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import life.genny.message.QMessageGennyMSG;

rule "REMIND_MENTORING_REVIEW_EMAIL"
    ruleflow-group 'EventProcessing'
    no-loop true
    salience 5
    when
   		$message : QEventMessage(data.code == "SCHEDULE_MENTORING_REVIEW_2HRS_AFTER")
   		userToken : GennyToken  ()
		serviceToken : GennyToken (code == "PER_SERVICE" )
		beUtils : BaseEntityUtils ()
     then
 		System.out.println(drools.getRule().getName() + " : Rule fired" );
 		System.out.println("Current Time is "+LocalDateTime.now());
		String targetCode = $message.getData().getTargetCode();
		System.out.println("targetCode: " +targetCode);

		BaseEntity mentoringSession = beUtils.getBaseEntityByCode(targetCode);
		BaseEntity applicationBe = beUtils.getBaseEntityFromLNKAttr(mentoringSession, "LNK_APPLICATION");
		beUtils.saveAnswer(new Answer(userToken.getUserCode(), applicationBe.getCode(), "PRI_CURRENT_MEETING" , targetCode));

		LocalDateTime meetingTime = mentoringSession.getValue("PRI_MEETING_TIME", null);
		String meetingTimeString = "";

		if (meetingTime != null) {
			meetingTimeString = meetingTime.toString();
		} else {
			System.out.println("meetingTime is null!");
		}

		BaseEntity menteeBe = beUtils.getBaseEntityFromLNKAttr(mentoringSession, "LNK_MENTEE");
		BaseEntity mentorBe = beUtils.getBaseEntityFromLNKAttr(mentoringSession, "LNK_MENTOR");

		System.out.println("^^^^^^^^^ menteeBeCode = " + menteeBe.getCode());
		System.out.println("^^^^^^^^^ mentorBeCode = " + mentorBe.getCode());
		System.out.println("^^^^^^^^^ meetingTime = " + meetingTimeString);

		BaseEntity project = beUtils.getBaseEntityByCode("PRJ_"+ serviceToken.getRealm().toUpperCase());

		if (menteeBe != null) {
			System.out.println("Sending email to mentee to review mentoring session");

			/* SEND EMAIL */
			String menteeEmail = menteeBe.getValue("PRI_EMAIL", null);
			System.out.println("menteeEmail: " + menteeEmail);

			if (menteeEmail != null) {
					System.out.println("Sending email to remind mentee for meeting feedback/review");

					QMessageGennyMSG msg = new QMessageGennyMSG.Builder("MSG_MENTEE_MEETING_REVIEW_FEEDBACK")
						.addRecipient(menteeBe)
						.addContext("URL:ENCODE", "QUE_FAKE_PARENT/ACT_AGREE_TO_MENTOR_MENTEE_MEETING")
						.addContext("BCC", "PRJ_MENTORMATCH")
						.setUtils(beUtils)
						.send();

			} else {
				System.out.println("ERROR Null Mentee email");
			}

			if (mentorBe != null) {

				/* SEND EMAIL */
				String mentorEmail = mentorBe.getValue("PRI_EMAIL", null);
				System.out.println("mentorEmail: " + mentorEmail);

				if (mentorEmail != null) {
					System.out.println("Sending email to remind mentor for meeting feedback/review");

					QMessageGennyMSG msg = new QMessageGennyMSG.Builder("MSG_MENTOR_MEETING_REVIEW_FEEDBACK")
							.addRecipient(mentorBe)
							.addContext("URL:ENCODE", "QUE_FAKE_PARENT/ACT_AGREE_TO_MENTOR_MENTEE_MEETING")
							.addContext("BCC", "PRJ_MENTORMATCH")
							.setUtils(beUtils)
							.send();
				} else {
					System.out.println("ERROR Null Mentor email");
				}
			}

		} else {
			System.out.println("menteeBe is null!");
		}
		retract($message)

		System.out.println("End of " + drools.getRule().getName());
end
