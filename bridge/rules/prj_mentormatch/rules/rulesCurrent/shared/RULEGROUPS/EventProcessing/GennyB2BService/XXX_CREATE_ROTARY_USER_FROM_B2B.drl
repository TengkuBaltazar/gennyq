package life.genny.rules;
import life.genny.qwanda.message.QDataAnswerMessage;
import life.genny.models.GennyToken;
import life.genny.rules.QRules;
import life.genny.utils.BaseEntityUtils;
import life.genny.qwanda.Answer;
import life.genny.qwanda.entity.BaseEntity;
import life.genny.qwanda.utils.OutputParam;
import java.util.List;
import java.util.ArrayList;

import io.vertx.core.json.JsonObject;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.message.QEventBtnClickMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.message.QDataAskMessage;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.QuestionUtils;
import life.genny.qwandautils.JsonUtils;
import java.util.ArrayList;
import java.util.List;
import life.genny.qwanda.message.QEventMessage;
import life.genny.utils.BucketUtils;
import life.genny.utils.TableUtils;
import life.genny.models.ThemePosition;
import life.genny.models.ThemeAttributeType;
import life.genny.qwandautils.GennySettings;
import life.genny.qwanda.message.QDataMessage;
import life.genny.qwanda.message.QDataB2BMessage
import life.genny.qwanda.EEntityStatus;

rule "CREATE_ROTARY_USER_FROM_B2B"
    ruleflow-group 'Movement'
    no-loop true
    salience 1
    when
	 	$message : QDataB2BMessage( )
		userToken : GennyToken (code != "PER_SERVICE" && userUUID == "ce511515-7e5d-4deb-a1b2-c819655a9916")
		serviceToken : GennyToken (code == "PER_SERVICE" )
		output : OutputParam( )
		ruleDetails : RuleDetails()
        beUtils : BaseEntityUtils( )


     then
 		System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing:: " + $message );

       /* String code = $message.getData().getCode();*/

        String name = null;
        String email = null;
        String phone = null;
        String entityCode = null;
        String defBECode = "DEF_MENTOR";

        /* Create User */

        /* CREATE BE FROM DEF */
        BaseEntity defBE = beUtils.getDEFByCode(defBECode);
        if (defBE == null) {
            System.out.println("ERROR: could not find DEF for code " + defBECode);

        } else {
            BaseEntity newBe = beUtils.create(defBE);

            if(newBe != null) {
                newBe = beUtils.getBaseEntityByCode(newBe.getCode());
                beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_NAME", name));
                beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_MOBILE", phone));
                beUtils.saveAnswer(new Answer(userToken.getUserCode(), newBe.getCode(), "PRI_EMAIL", email));
            }

            System.out.println(">>>>>>>>>>>> " + newBe.getName() + " <<<<<<<<<<<<");

            if (newBe != null) {
                /* Set Status to Pending */
                newBe.setStatus(EEntityStatus.PENDING);
                beUtils.saveBaseEntity(defBE,newBe);
            }
        }

        /* Send Confirmation Email */

        /*String sendEmail = newBe.getValue("LNK_SEND_EMAIL", "");
		System.out.println("sendEmail = " + sendEmail);

		if (sendEmail.contains("SEL_YES")) {
			/* Init Sendgrid Msg
			QMessageGennyMSG msg = new QMessageGennyMSG(QBaseMSGMessageType.SENDGRID);
			msg.setTemplateCode("MSG_MENTOR1_REGISTER");
			msg.addRecipient(newBe);
			msg.addContext("PASSWORD", password);
			msg.addContext("URL", mentorUrl);
			msg.addContext("BCC", "PRJ_MENTORMATCH");

			/* Sending Message
			MessageUtils.sendMessage(beUtils, msg);
		}*/

		output.setTypeOfResult("NONE");
		output.setResultCode("NONE");

		retract(newBe)
		retract( $message);
        System.out.println("End of" + drools.getRule().getName());
end
