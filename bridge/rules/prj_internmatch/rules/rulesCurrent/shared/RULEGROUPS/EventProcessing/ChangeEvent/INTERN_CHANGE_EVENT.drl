package life.genny.rules;

import life.genny.qwanda.utils.OutputParam;

import life.genny.qwanda.message.QEventMessage;
import life.genny.qwanda.message.QEventAttributeValueChangeMessage;
import life.genny.models.GennyToken;
import life.genny.utils.VertxUtils;
import io.vertx.core.json.JsonObject;
import life.genny.qwanda.utils.OutputParam;
import life.genny.qwanda.entity.SearchEntity;
import life.genny.qwanda.Answer;
import life.genny.utils.BaseEntityUtils;
import life.genny.utils.TableUtils;
import life.genny.utils.SearchUtils;
import life.genny.utils.CacheSearchUtils;
import life.genny.qwandautils.GennySettings;
import life.genny.jbpm.customworkitemhandlers.ShowFrame;
import life.genny.qwanda.rule.RuleDetails;
import io.vavr.Tuple;
import java.util.Base64;
import io.vavr.Tuple2;
import life.genny.qwandautils.QwandaUtils;
import life.genny.qwanda.message.QDataBaseEntityMessage;
import life.genny.qwanda.exception.BadDataException;


rule "INTERN_CHANGE_EVENT"
    ruleflow-group 'ChangeProcessing'
	salience 2
    no-loop
    when
			message : QEventAttributeValueChangeMessage((event_type matches "EVT_ATTRIBUTE_VALUE_CHANGE") && (getBe().getCode() matches "PER_\\S+") )	
			ruleDetails : RuleDetails()
			beUtils : BaseEntityUtils()
			serviceToken : GennyToken (code == "PER_SERVICE" )
			userToken : GennyToken (code != "PER_SERVICE" )
    then
			System.out.println(ruleDetails+" "+drools.getRule().getName()+" Processing Change Event : " + message );
			 	    
			/* Get application baseentity */
			System.out.println("Changed Application code is "+message.getBe().getCode());
			BaseEntity targetBe = beUtils.getBaseEntityByCode(message.getBe().getCode());
			System.out.println("Changed be is "+targetBe+" REGENERATING CACHE SEARCHES");
			
			/* Re generate cached applications */
			SearchUtils.regenerateCaches(beUtils, targetBe);
			 	     
			  			
 	      /* retract( message);*/
  	    
end
